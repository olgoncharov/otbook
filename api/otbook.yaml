openapi: 3.0.0
info:
  title: Otbook API
  version: 1.0.0
  description: Социальная сеть Otbook

servers:
  - url: http://localhost:8000/api/v1
    description: Local server for testing

tags:
  - name: Signup
  - name: Auth
  - name: Profiles

paths:
  /signup:
    post:
      tags:
        - Signup
      summary: Регистрация нового пользователя
      requestBody:
        description: Данные для регистрации пользователя
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                birthdate:
                  type: string
                  format: date
                city:
                  type: string
                sex:
                  type: string
                hobby:
                  type: string

      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        400:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Вход по логину и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string

      responses:
        200:
          $ref: '#/components/responses/TokenPair'
        400:
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Обновление токена
      description: Принимает refresh-токен и генерирует новый access-токен
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/TokenPair'
        400:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'

  /profiles:
    get:
      tags:
        - Profiles
      summary: Список всех профилей
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                  totalCount:
                    type: integer
        400:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profiles/{username}:
    get:
      tags:
        - Profiles
      summary: Конкретный профиль
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Имя пользователя
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          $ref: '#/components/responses/UserNotFound'

  /me/profile:
    get:
      tags:
        - Profiles
      summary: Профиль текущего авторизованного пользователя
      security:
        - BearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Profiles
      summary: Отредактировать свой профиль
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                birthdate:
                  type: string
                  format: date
                city:
                  type: string
                sex:
                  type: string
                hobby:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        400:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'

  /profiles/{username}/friends:
    get:
      tags:
        - Profiles
      summary: Список друзей пользователя
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Имя пользователя, с которым нужно подружиться
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                  totalCount:
                    type: integer
        404:
          $ref: '#/components/responses/UserNotFound'

    post:
      tags:
        - Profiles
      summary: Подружиться с пользователем
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Имя пользователя
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/UserNotFound'

  /me/friends:
    get:
      tags:
        - Profiles
      summary: Список друзей текущего авторизованного пользовтеля
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                  totalCount:
                    type: integer
        401:
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Profile:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date
        city:
          type: string
        sex:
          type: string
        hobby:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string

  responses:
    TokenPair:
      description: Пара jwt токенов access + refresh
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
              refreshToken:
                type: string
    
    Unauthorized:
      description: Не передан jwt токен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UserNotFound:
      description: Пользователь не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'