package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/service/cache_updater.durableRepo -o ./internal/service/cache_updater/mocks/durable_repo_mock.go -n DurableRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/olgoncharov/otbook/internal/entity"
	"github.com/olgoncharov/otbook/internal/repository/dto"
)

// DurableRepoMock implements cacheupdater.durableRepo
type DurableRepoMock struct {
	t minimock.Tester

	funcGetCelebrityFriends          func(ctx context.Context, username string) (sa1 []string, err error)
	inspectFuncGetCelebrityFriends   func(ctx context.Context, username string)
	afterGetCelebrityFriendsCounter  uint64
	beforeGetCelebrityFriendsCounter uint64
	GetCelebrityFriendsMock          mDurableRepoMockGetCelebrityFriends

	funcGetFollowersOfUser          func(ctx context.Context, username string) (sa1 []string, err error)
	inspectFuncGetFollowersOfUser   func(ctx context.Context, username string)
	afterGetFollowersOfUserCounter  uint64
	beforeGetFollowersOfUserCounter uint64
	GetFollowersOfUserMock          mDurableRepoMockGetFollowersOfUser

	funcGetPostFeedWithoutCelebrities          func(ctx context.Context, username string, limit uint) (pa1 []dto.PostShortInfo, err error)
	inspectFuncGetPostFeedWithoutCelebrities   func(ctx context.Context, username string, limit uint)
	afterGetPostFeedWithoutCelebritiesCounter  uint64
	beforeGetPostFeedWithoutCelebritiesCounter uint64
	GetPostFeedWithoutCelebritiesMock          mDurableRepoMockGetPostFeedWithoutCelebrities

	funcGetProfileByUsername          func(ctx context.Context, username string) (pp1 *entity.Profile, err error)
	inspectFuncGetProfileByUsername   func(ctx context.Context, username string)
	afterGetProfileByUsernameCounter  uint64
	beforeGetProfileByUsernameCounter uint64
	GetProfileByUsernameMock          mDurableRepoMockGetProfileByUsername
}

// NewDurableRepoMock returns a mock for cacheupdater.durableRepo
func NewDurableRepoMock(t minimock.Tester) *DurableRepoMock {
	m := &DurableRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCelebrityFriendsMock = mDurableRepoMockGetCelebrityFriends{mock: m}
	m.GetCelebrityFriendsMock.callArgs = []*DurableRepoMockGetCelebrityFriendsParams{}

	m.GetFollowersOfUserMock = mDurableRepoMockGetFollowersOfUser{mock: m}
	m.GetFollowersOfUserMock.callArgs = []*DurableRepoMockGetFollowersOfUserParams{}

	m.GetPostFeedWithoutCelebritiesMock = mDurableRepoMockGetPostFeedWithoutCelebrities{mock: m}
	m.GetPostFeedWithoutCelebritiesMock.callArgs = []*DurableRepoMockGetPostFeedWithoutCelebritiesParams{}

	m.GetProfileByUsernameMock = mDurableRepoMockGetProfileByUsername{mock: m}
	m.GetProfileByUsernameMock.callArgs = []*DurableRepoMockGetProfileByUsernameParams{}

	return m
}

type mDurableRepoMockGetCelebrityFriends struct {
	mock               *DurableRepoMock
	defaultExpectation *DurableRepoMockGetCelebrityFriendsExpectation
	expectations       []*DurableRepoMockGetCelebrityFriendsExpectation

	callArgs []*DurableRepoMockGetCelebrityFriendsParams
	mutex    sync.RWMutex
}

// DurableRepoMockGetCelebrityFriendsExpectation specifies expectation struct of the durableRepo.GetCelebrityFriends
type DurableRepoMockGetCelebrityFriendsExpectation struct {
	mock    *DurableRepoMock
	params  *DurableRepoMockGetCelebrityFriendsParams
	results *DurableRepoMockGetCelebrityFriendsResults
	Counter uint64
}

// DurableRepoMockGetCelebrityFriendsParams contains parameters of the durableRepo.GetCelebrityFriends
type DurableRepoMockGetCelebrityFriendsParams struct {
	ctx      context.Context
	username string
}

// DurableRepoMockGetCelebrityFriendsResults contains results of the durableRepo.GetCelebrityFriends
type DurableRepoMockGetCelebrityFriendsResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for durableRepo.GetCelebrityFriends
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) Expect(ctx context.Context, username string) *mDurableRepoMockGetCelebrityFriends {
	if mmGetCelebrityFriends.mock.funcGetCelebrityFriends != nil {
		mmGetCelebrityFriends.mock.t.Fatalf("DurableRepoMock.GetCelebrityFriends mock is already set by Set")
	}

	if mmGetCelebrityFriends.defaultExpectation == nil {
		mmGetCelebrityFriends.defaultExpectation = &DurableRepoMockGetCelebrityFriendsExpectation{}
	}

	mmGetCelebrityFriends.defaultExpectation.params = &DurableRepoMockGetCelebrityFriendsParams{ctx, username}
	for _, e := range mmGetCelebrityFriends.expectations {
		if minimock.Equal(e.params, mmGetCelebrityFriends.defaultExpectation.params) {
			mmGetCelebrityFriends.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCelebrityFriends.defaultExpectation.params)
		}
	}

	return mmGetCelebrityFriends
}

// Inspect accepts an inspector function that has same arguments as the durableRepo.GetCelebrityFriends
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) Inspect(f func(ctx context.Context, username string)) *mDurableRepoMockGetCelebrityFriends {
	if mmGetCelebrityFriends.mock.inspectFuncGetCelebrityFriends != nil {
		mmGetCelebrityFriends.mock.t.Fatalf("Inspect function is already set for DurableRepoMock.GetCelebrityFriends")
	}

	mmGetCelebrityFriends.mock.inspectFuncGetCelebrityFriends = f

	return mmGetCelebrityFriends
}

// Return sets up results that will be returned by durableRepo.GetCelebrityFriends
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) Return(sa1 []string, err error) *DurableRepoMock {
	if mmGetCelebrityFriends.mock.funcGetCelebrityFriends != nil {
		mmGetCelebrityFriends.mock.t.Fatalf("DurableRepoMock.GetCelebrityFriends mock is already set by Set")
	}

	if mmGetCelebrityFriends.defaultExpectation == nil {
		mmGetCelebrityFriends.defaultExpectation = &DurableRepoMockGetCelebrityFriendsExpectation{mock: mmGetCelebrityFriends.mock}
	}
	mmGetCelebrityFriends.defaultExpectation.results = &DurableRepoMockGetCelebrityFriendsResults{sa1, err}
	return mmGetCelebrityFriends.mock
}

//Set uses given function f to mock the durableRepo.GetCelebrityFriends method
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) Set(f func(ctx context.Context, username string) (sa1 []string, err error)) *DurableRepoMock {
	if mmGetCelebrityFriends.defaultExpectation != nil {
		mmGetCelebrityFriends.mock.t.Fatalf("Default expectation is already set for the durableRepo.GetCelebrityFriends method")
	}

	if len(mmGetCelebrityFriends.expectations) > 0 {
		mmGetCelebrityFriends.mock.t.Fatalf("Some expectations are already set for the durableRepo.GetCelebrityFriends method")
	}

	mmGetCelebrityFriends.mock.funcGetCelebrityFriends = f
	return mmGetCelebrityFriends.mock
}

// When sets expectation for the durableRepo.GetCelebrityFriends which will trigger the result defined by the following
// Then helper
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) When(ctx context.Context, username string) *DurableRepoMockGetCelebrityFriendsExpectation {
	if mmGetCelebrityFriends.mock.funcGetCelebrityFriends != nil {
		mmGetCelebrityFriends.mock.t.Fatalf("DurableRepoMock.GetCelebrityFriends mock is already set by Set")
	}

	expectation := &DurableRepoMockGetCelebrityFriendsExpectation{
		mock:   mmGetCelebrityFriends.mock,
		params: &DurableRepoMockGetCelebrityFriendsParams{ctx, username},
	}
	mmGetCelebrityFriends.expectations = append(mmGetCelebrityFriends.expectations, expectation)
	return expectation
}

// Then sets up durableRepo.GetCelebrityFriends return parameters for the expectation previously defined by the When method
func (e *DurableRepoMockGetCelebrityFriendsExpectation) Then(sa1 []string, err error) *DurableRepoMock {
	e.results = &DurableRepoMockGetCelebrityFriendsResults{sa1, err}
	return e.mock
}

// GetCelebrityFriends implements cacheupdater.durableRepo
func (mmGetCelebrityFriends *DurableRepoMock) GetCelebrityFriends(ctx context.Context, username string) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmGetCelebrityFriends.beforeGetCelebrityFriendsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCelebrityFriends.afterGetCelebrityFriendsCounter, 1)

	if mmGetCelebrityFriends.inspectFuncGetCelebrityFriends != nil {
		mmGetCelebrityFriends.inspectFuncGetCelebrityFriends(ctx, username)
	}

	mm_params := &DurableRepoMockGetCelebrityFriendsParams{ctx, username}

	// Record call args
	mmGetCelebrityFriends.GetCelebrityFriendsMock.mutex.Lock()
	mmGetCelebrityFriends.GetCelebrityFriendsMock.callArgs = append(mmGetCelebrityFriends.GetCelebrityFriendsMock.callArgs, mm_params)
	mmGetCelebrityFriends.GetCelebrityFriendsMock.mutex.Unlock()

	for _, e := range mmGetCelebrityFriends.GetCelebrityFriendsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmGetCelebrityFriends.GetCelebrityFriendsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCelebrityFriends.GetCelebrityFriendsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCelebrityFriends.GetCelebrityFriendsMock.defaultExpectation.params
		mm_got := DurableRepoMockGetCelebrityFriendsParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCelebrityFriends.t.Errorf("DurableRepoMock.GetCelebrityFriends got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCelebrityFriends.GetCelebrityFriendsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCelebrityFriends.t.Fatal("No results are set for the DurableRepoMock.GetCelebrityFriends")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmGetCelebrityFriends.funcGetCelebrityFriends != nil {
		return mmGetCelebrityFriends.funcGetCelebrityFriends(ctx, username)
	}
	mmGetCelebrityFriends.t.Fatalf("Unexpected call to DurableRepoMock.GetCelebrityFriends. %v %v", ctx, username)
	return
}

// GetCelebrityFriendsAfterCounter returns a count of finished DurableRepoMock.GetCelebrityFriends invocations
func (mmGetCelebrityFriends *DurableRepoMock) GetCelebrityFriendsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCelebrityFriends.afterGetCelebrityFriendsCounter)
}

// GetCelebrityFriendsBeforeCounter returns a count of DurableRepoMock.GetCelebrityFriends invocations
func (mmGetCelebrityFriends *DurableRepoMock) GetCelebrityFriendsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCelebrityFriends.beforeGetCelebrityFriendsCounter)
}

// Calls returns a list of arguments used in each call to DurableRepoMock.GetCelebrityFriends.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCelebrityFriends *mDurableRepoMockGetCelebrityFriends) Calls() []*DurableRepoMockGetCelebrityFriendsParams {
	mmGetCelebrityFriends.mutex.RLock()

	argCopy := make([]*DurableRepoMockGetCelebrityFriendsParams, len(mmGetCelebrityFriends.callArgs))
	copy(argCopy, mmGetCelebrityFriends.callArgs)

	mmGetCelebrityFriends.mutex.RUnlock()

	return argCopy
}

// MinimockGetCelebrityFriendsDone returns true if the count of the GetCelebrityFriends invocations corresponds
// the number of defined expectations
func (m *DurableRepoMock) MinimockGetCelebrityFriendsDone() bool {
	for _, e := range m.GetCelebrityFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCelebrityFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCelebrityFriendsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCelebrityFriends != nil && mm_atomic.LoadUint64(&m.afterGetCelebrityFriendsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCelebrityFriendsInspect logs each unmet expectation
func (m *DurableRepoMock) MinimockGetCelebrityFriendsInspect() {
	for _, e := range m.GetCelebrityFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DurableRepoMock.GetCelebrityFriends with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCelebrityFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCelebrityFriendsCounter) < 1 {
		if m.GetCelebrityFriendsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DurableRepoMock.GetCelebrityFriends")
		} else {
			m.t.Errorf("Expected call to DurableRepoMock.GetCelebrityFriends with params: %#v", *m.GetCelebrityFriendsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCelebrityFriends != nil && mm_atomic.LoadUint64(&m.afterGetCelebrityFriendsCounter) < 1 {
		m.t.Error("Expected call to DurableRepoMock.GetCelebrityFriends")
	}
}

type mDurableRepoMockGetFollowersOfUser struct {
	mock               *DurableRepoMock
	defaultExpectation *DurableRepoMockGetFollowersOfUserExpectation
	expectations       []*DurableRepoMockGetFollowersOfUserExpectation

	callArgs []*DurableRepoMockGetFollowersOfUserParams
	mutex    sync.RWMutex
}

// DurableRepoMockGetFollowersOfUserExpectation specifies expectation struct of the durableRepo.GetFollowersOfUser
type DurableRepoMockGetFollowersOfUserExpectation struct {
	mock    *DurableRepoMock
	params  *DurableRepoMockGetFollowersOfUserParams
	results *DurableRepoMockGetFollowersOfUserResults
	Counter uint64
}

// DurableRepoMockGetFollowersOfUserParams contains parameters of the durableRepo.GetFollowersOfUser
type DurableRepoMockGetFollowersOfUserParams struct {
	ctx      context.Context
	username string
}

// DurableRepoMockGetFollowersOfUserResults contains results of the durableRepo.GetFollowersOfUser
type DurableRepoMockGetFollowersOfUserResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for durableRepo.GetFollowersOfUser
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) Expect(ctx context.Context, username string) *mDurableRepoMockGetFollowersOfUser {
	if mmGetFollowersOfUser.mock.funcGetFollowersOfUser != nil {
		mmGetFollowersOfUser.mock.t.Fatalf("DurableRepoMock.GetFollowersOfUser mock is already set by Set")
	}

	if mmGetFollowersOfUser.defaultExpectation == nil {
		mmGetFollowersOfUser.defaultExpectation = &DurableRepoMockGetFollowersOfUserExpectation{}
	}

	mmGetFollowersOfUser.defaultExpectation.params = &DurableRepoMockGetFollowersOfUserParams{ctx, username}
	for _, e := range mmGetFollowersOfUser.expectations {
		if minimock.Equal(e.params, mmGetFollowersOfUser.defaultExpectation.params) {
			mmGetFollowersOfUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetFollowersOfUser.defaultExpectation.params)
		}
	}

	return mmGetFollowersOfUser
}

// Inspect accepts an inspector function that has same arguments as the durableRepo.GetFollowersOfUser
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) Inspect(f func(ctx context.Context, username string)) *mDurableRepoMockGetFollowersOfUser {
	if mmGetFollowersOfUser.mock.inspectFuncGetFollowersOfUser != nil {
		mmGetFollowersOfUser.mock.t.Fatalf("Inspect function is already set for DurableRepoMock.GetFollowersOfUser")
	}

	mmGetFollowersOfUser.mock.inspectFuncGetFollowersOfUser = f

	return mmGetFollowersOfUser
}

// Return sets up results that will be returned by durableRepo.GetFollowersOfUser
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) Return(sa1 []string, err error) *DurableRepoMock {
	if mmGetFollowersOfUser.mock.funcGetFollowersOfUser != nil {
		mmGetFollowersOfUser.mock.t.Fatalf("DurableRepoMock.GetFollowersOfUser mock is already set by Set")
	}

	if mmGetFollowersOfUser.defaultExpectation == nil {
		mmGetFollowersOfUser.defaultExpectation = &DurableRepoMockGetFollowersOfUserExpectation{mock: mmGetFollowersOfUser.mock}
	}
	mmGetFollowersOfUser.defaultExpectation.results = &DurableRepoMockGetFollowersOfUserResults{sa1, err}
	return mmGetFollowersOfUser.mock
}

//Set uses given function f to mock the durableRepo.GetFollowersOfUser method
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) Set(f func(ctx context.Context, username string) (sa1 []string, err error)) *DurableRepoMock {
	if mmGetFollowersOfUser.defaultExpectation != nil {
		mmGetFollowersOfUser.mock.t.Fatalf("Default expectation is already set for the durableRepo.GetFollowersOfUser method")
	}

	if len(mmGetFollowersOfUser.expectations) > 0 {
		mmGetFollowersOfUser.mock.t.Fatalf("Some expectations are already set for the durableRepo.GetFollowersOfUser method")
	}

	mmGetFollowersOfUser.mock.funcGetFollowersOfUser = f
	return mmGetFollowersOfUser.mock
}

// When sets expectation for the durableRepo.GetFollowersOfUser which will trigger the result defined by the following
// Then helper
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) When(ctx context.Context, username string) *DurableRepoMockGetFollowersOfUserExpectation {
	if mmGetFollowersOfUser.mock.funcGetFollowersOfUser != nil {
		mmGetFollowersOfUser.mock.t.Fatalf("DurableRepoMock.GetFollowersOfUser mock is already set by Set")
	}

	expectation := &DurableRepoMockGetFollowersOfUserExpectation{
		mock:   mmGetFollowersOfUser.mock,
		params: &DurableRepoMockGetFollowersOfUserParams{ctx, username},
	}
	mmGetFollowersOfUser.expectations = append(mmGetFollowersOfUser.expectations, expectation)
	return expectation
}

// Then sets up durableRepo.GetFollowersOfUser return parameters for the expectation previously defined by the When method
func (e *DurableRepoMockGetFollowersOfUserExpectation) Then(sa1 []string, err error) *DurableRepoMock {
	e.results = &DurableRepoMockGetFollowersOfUserResults{sa1, err}
	return e.mock
}

// GetFollowersOfUser implements cacheupdater.durableRepo
func (mmGetFollowersOfUser *DurableRepoMock) GetFollowersOfUser(ctx context.Context, username string) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmGetFollowersOfUser.beforeGetFollowersOfUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetFollowersOfUser.afterGetFollowersOfUserCounter, 1)

	if mmGetFollowersOfUser.inspectFuncGetFollowersOfUser != nil {
		mmGetFollowersOfUser.inspectFuncGetFollowersOfUser(ctx, username)
	}

	mm_params := &DurableRepoMockGetFollowersOfUserParams{ctx, username}

	// Record call args
	mmGetFollowersOfUser.GetFollowersOfUserMock.mutex.Lock()
	mmGetFollowersOfUser.GetFollowersOfUserMock.callArgs = append(mmGetFollowersOfUser.GetFollowersOfUserMock.callArgs, mm_params)
	mmGetFollowersOfUser.GetFollowersOfUserMock.mutex.Unlock()

	for _, e := range mmGetFollowersOfUser.GetFollowersOfUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmGetFollowersOfUser.GetFollowersOfUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetFollowersOfUser.GetFollowersOfUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetFollowersOfUser.GetFollowersOfUserMock.defaultExpectation.params
		mm_got := DurableRepoMockGetFollowersOfUserParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetFollowersOfUser.t.Errorf("DurableRepoMock.GetFollowersOfUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetFollowersOfUser.GetFollowersOfUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetFollowersOfUser.t.Fatal("No results are set for the DurableRepoMock.GetFollowersOfUser")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmGetFollowersOfUser.funcGetFollowersOfUser != nil {
		return mmGetFollowersOfUser.funcGetFollowersOfUser(ctx, username)
	}
	mmGetFollowersOfUser.t.Fatalf("Unexpected call to DurableRepoMock.GetFollowersOfUser. %v %v", ctx, username)
	return
}

// GetFollowersOfUserAfterCounter returns a count of finished DurableRepoMock.GetFollowersOfUser invocations
func (mmGetFollowersOfUser *DurableRepoMock) GetFollowersOfUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFollowersOfUser.afterGetFollowersOfUserCounter)
}

// GetFollowersOfUserBeforeCounter returns a count of DurableRepoMock.GetFollowersOfUser invocations
func (mmGetFollowersOfUser *DurableRepoMock) GetFollowersOfUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFollowersOfUser.beforeGetFollowersOfUserCounter)
}

// Calls returns a list of arguments used in each call to DurableRepoMock.GetFollowersOfUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetFollowersOfUser *mDurableRepoMockGetFollowersOfUser) Calls() []*DurableRepoMockGetFollowersOfUserParams {
	mmGetFollowersOfUser.mutex.RLock()

	argCopy := make([]*DurableRepoMockGetFollowersOfUserParams, len(mmGetFollowersOfUser.callArgs))
	copy(argCopy, mmGetFollowersOfUser.callArgs)

	mmGetFollowersOfUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetFollowersOfUserDone returns true if the count of the GetFollowersOfUser invocations corresponds
// the number of defined expectations
func (m *DurableRepoMock) MinimockGetFollowersOfUserDone() bool {
	for _, e := range m.GetFollowersOfUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFollowersOfUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFollowersOfUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFollowersOfUser != nil && mm_atomic.LoadUint64(&m.afterGetFollowersOfUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetFollowersOfUserInspect logs each unmet expectation
func (m *DurableRepoMock) MinimockGetFollowersOfUserInspect() {
	for _, e := range m.GetFollowersOfUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DurableRepoMock.GetFollowersOfUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFollowersOfUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFollowersOfUserCounter) < 1 {
		if m.GetFollowersOfUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DurableRepoMock.GetFollowersOfUser")
		} else {
			m.t.Errorf("Expected call to DurableRepoMock.GetFollowersOfUser with params: %#v", *m.GetFollowersOfUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFollowersOfUser != nil && mm_atomic.LoadUint64(&m.afterGetFollowersOfUserCounter) < 1 {
		m.t.Error("Expected call to DurableRepoMock.GetFollowersOfUser")
	}
}

type mDurableRepoMockGetPostFeedWithoutCelebrities struct {
	mock               *DurableRepoMock
	defaultExpectation *DurableRepoMockGetPostFeedWithoutCelebritiesExpectation
	expectations       []*DurableRepoMockGetPostFeedWithoutCelebritiesExpectation

	callArgs []*DurableRepoMockGetPostFeedWithoutCelebritiesParams
	mutex    sync.RWMutex
}

// DurableRepoMockGetPostFeedWithoutCelebritiesExpectation specifies expectation struct of the durableRepo.GetPostFeedWithoutCelebrities
type DurableRepoMockGetPostFeedWithoutCelebritiesExpectation struct {
	mock    *DurableRepoMock
	params  *DurableRepoMockGetPostFeedWithoutCelebritiesParams
	results *DurableRepoMockGetPostFeedWithoutCelebritiesResults
	Counter uint64
}

// DurableRepoMockGetPostFeedWithoutCelebritiesParams contains parameters of the durableRepo.GetPostFeedWithoutCelebrities
type DurableRepoMockGetPostFeedWithoutCelebritiesParams struct {
	ctx      context.Context
	username string
	limit    uint
}

// DurableRepoMockGetPostFeedWithoutCelebritiesResults contains results of the durableRepo.GetPostFeedWithoutCelebrities
type DurableRepoMockGetPostFeedWithoutCelebritiesResults struct {
	pa1 []dto.PostShortInfo
	err error
}

// Expect sets up expected params for durableRepo.GetPostFeedWithoutCelebrities
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) Expect(ctx context.Context, username string, limit uint) *mDurableRepoMockGetPostFeedWithoutCelebrities {
	if mmGetPostFeedWithoutCelebrities.mock.funcGetPostFeedWithoutCelebrities != nil {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("DurableRepoMock.GetPostFeedWithoutCelebrities mock is already set by Set")
	}

	if mmGetPostFeedWithoutCelebrities.defaultExpectation == nil {
		mmGetPostFeedWithoutCelebrities.defaultExpectation = &DurableRepoMockGetPostFeedWithoutCelebritiesExpectation{}
	}

	mmGetPostFeedWithoutCelebrities.defaultExpectation.params = &DurableRepoMockGetPostFeedWithoutCelebritiesParams{ctx, username, limit}
	for _, e := range mmGetPostFeedWithoutCelebrities.expectations {
		if minimock.Equal(e.params, mmGetPostFeedWithoutCelebrities.defaultExpectation.params) {
			mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPostFeedWithoutCelebrities.defaultExpectation.params)
		}
	}

	return mmGetPostFeedWithoutCelebrities
}

// Inspect accepts an inspector function that has same arguments as the durableRepo.GetPostFeedWithoutCelebrities
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) Inspect(f func(ctx context.Context, username string, limit uint)) *mDurableRepoMockGetPostFeedWithoutCelebrities {
	if mmGetPostFeedWithoutCelebrities.mock.inspectFuncGetPostFeedWithoutCelebrities != nil {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("Inspect function is already set for DurableRepoMock.GetPostFeedWithoutCelebrities")
	}

	mmGetPostFeedWithoutCelebrities.mock.inspectFuncGetPostFeedWithoutCelebrities = f

	return mmGetPostFeedWithoutCelebrities
}

// Return sets up results that will be returned by durableRepo.GetPostFeedWithoutCelebrities
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) Return(pa1 []dto.PostShortInfo, err error) *DurableRepoMock {
	if mmGetPostFeedWithoutCelebrities.mock.funcGetPostFeedWithoutCelebrities != nil {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("DurableRepoMock.GetPostFeedWithoutCelebrities mock is already set by Set")
	}

	if mmGetPostFeedWithoutCelebrities.defaultExpectation == nil {
		mmGetPostFeedWithoutCelebrities.defaultExpectation = &DurableRepoMockGetPostFeedWithoutCelebritiesExpectation{mock: mmGetPostFeedWithoutCelebrities.mock}
	}
	mmGetPostFeedWithoutCelebrities.defaultExpectation.results = &DurableRepoMockGetPostFeedWithoutCelebritiesResults{pa1, err}
	return mmGetPostFeedWithoutCelebrities.mock
}

//Set uses given function f to mock the durableRepo.GetPostFeedWithoutCelebrities method
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) Set(f func(ctx context.Context, username string, limit uint) (pa1 []dto.PostShortInfo, err error)) *DurableRepoMock {
	if mmGetPostFeedWithoutCelebrities.defaultExpectation != nil {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("Default expectation is already set for the durableRepo.GetPostFeedWithoutCelebrities method")
	}

	if len(mmGetPostFeedWithoutCelebrities.expectations) > 0 {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("Some expectations are already set for the durableRepo.GetPostFeedWithoutCelebrities method")
	}

	mmGetPostFeedWithoutCelebrities.mock.funcGetPostFeedWithoutCelebrities = f
	return mmGetPostFeedWithoutCelebrities.mock
}

// When sets expectation for the durableRepo.GetPostFeedWithoutCelebrities which will trigger the result defined by the following
// Then helper
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) When(ctx context.Context, username string, limit uint) *DurableRepoMockGetPostFeedWithoutCelebritiesExpectation {
	if mmGetPostFeedWithoutCelebrities.mock.funcGetPostFeedWithoutCelebrities != nil {
		mmGetPostFeedWithoutCelebrities.mock.t.Fatalf("DurableRepoMock.GetPostFeedWithoutCelebrities mock is already set by Set")
	}

	expectation := &DurableRepoMockGetPostFeedWithoutCelebritiesExpectation{
		mock:   mmGetPostFeedWithoutCelebrities.mock,
		params: &DurableRepoMockGetPostFeedWithoutCelebritiesParams{ctx, username, limit},
	}
	mmGetPostFeedWithoutCelebrities.expectations = append(mmGetPostFeedWithoutCelebrities.expectations, expectation)
	return expectation
}

// Then sets up durableRepo.GetPostFeedWithoutCelebrities return parameters for the expectation previously defined by the When method
func (e *DurableRepoMockGetPostFeedWithoutCelebritiesExpectation) Then(pa1 []dto.PostShortInfo, err error) *DurableRepoMock {
	e.results = &DurableRepoMockGetPostFeedWithoutCelebritiesResults{pa1, err}
	return e.mock
}

// GetPostFeedWithoutCelebrities implements cacheupdater.durableRepo
func (mmGetPostFeedWithoutCelebrities *DurableRepoMock) GetPostFeedWithoutCelebrities(ctx context.Context, username string, limit uint) (pa1 []dto.PostShortInfo, err error) {
	mm_atomic.AddUint64(&mmGetPostFeedWithoutCelebrities.beforeGetPostFeedWithoutCelebritiesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPostFeedWithoutCelebrities.afterGetPostFeedWithoutCelebritiesCounter, 1)

	if mmGetPostFeedWithoutCelebrities.inspectFuncGetPostFeedWithoutCelebrities != nil {
		mmGetPostFeedWithoutCelebrities.inspectFuncGetPostFeedWithoutCelebrities(ctx, username, limit)
	}

	mm_params := &DurableRepoMockGetPostFeedWithoutCelebritiesParams{ctx, username, limit}

	// Record call args
	mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.mutex.Lock()
	mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.callArgs = append(mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.callArgs, mm_params)
	mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.mutex.Unlock()

	for _, e := range mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.defaultExpectation.params
		mm_got := DurableRepoMockGetPostFeedWithoutCelebritiesParams{ctx, username, limit}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPostFeedWithoutCelebrities.t.Errorf("DurableRepoMock.GetPostFeedWithoutCelebrities got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPostFeedWithoutCelebrities.GetPostFeedWithoutCelebritiesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPostFeedWithoutCelebrities.t.Fatal("No results are set for the DurableRepoMock.GetPostFeedWithoutCelebrities")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGetPostFeedWithoutCelebrities.funcGetPostFeedWithoutCelebrities != nil {
		return mmGetPostFeedWithoutCelebrities.funcGetPostFeedWithoutCelebrities(ctx, username, limit)
	}
	mmGetPostFeedWithoutCelebrities.t.Fatalf("Unexpected call to DurableRepoMock.GetPostFeedWithoutCelebrities. %v %v %v", ctx, username, limit)
	return
}

// GetPostFeedWithoutCelebritiesAfterCounter returns a count of finished DurableRepoMock.GetPostFeedWithoutCelebrities invocations
func (mmGetPostFeedWithoutCelebrities *DurableRepoMock) GetPostFeedWithoutCelebritiesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPostFeedWithoutCelebrities.afterGetPostFeedWithoutCelebritiesCounter)
}

// GetPostFeedWithoutCelebritiesBeforeCounter returns a count of DurableRepoMock.GetPostFeedWithoutCelebrities invocations
func (mmGetPostFeedWithoutCelebrities *DurableRepoMock) GetPostFeedWithoutCelebritiesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPostFeedWithoutCelebrities.beforeGetPostFeedWithoutCelebritiesCounter)
}

// Calls returns a list of arguments used in each call to DurableRepoMock.GetPostFeedWithoutCelebrities.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPostFeedWithoutCelebrities *mDurableRepoMockGetPostFeedWithoutCelebrities) Calls() []*DurableRepoMockGetPostFeedWithoutCelebritiesParams {
	mmGetPostFeedWithoutCelebrities.mutex.RLock()

	argCopy := make([]*DurableRepoMockGetPostFeedWithoutCelebritiesParams, len(mmGetPostFeedWithoutCelebrities.callArgs))
	copy(argCopy, mmGetPostFeedWithoutCelebrities.callArgs)

	mmGetPostFeedWithoutCelebrities.mutex.RUnlock()

	return argCopy
}

// MinimockGetPostFeedWithoutCelebritiesDone returns true if the count of the GetPostFeedWithoutCelebrities invocations corresponds
// the number of defined expectations
func (m *DurableRepoMock) MinimockGetPostFeedWithoutCelebritiesDone() bool {
	for _, e := range m.GetPostFeedWithoutCelebritiesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPostFeedWithoutCelebritiesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPostFeedWithoutCelebritiesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPostFeedWithoutCelebrities != nil && mm_atomic.LoadUint64(&m.afterGetPostFeedWithoutCelebritiesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPostFeedWithoutCelebritiesInspect logs each unmet expectation
func (m *DurableRepoMock) MinimockGetPostFeedWithoutCelebritiesInspect() {
	for _, e := range m.GetPostFeedWithoutCelebritiesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DurableRepoMock.GetPostFeedWithoutCelebrities with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPostFeedWithoutCelebritiesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPostFeedWithoutCelebritiesCounter) < 1 {
		if m.GetPostFeedWithoutCelebritiesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DurableRepoMock.GetPostFeedWithoutCelebrities")
		} else {
			m.t.Errorf("Expected call to DurableRepoMock.GetPostFeedWithoutCelebrities with params: %#v", *m.GetPostFeedWithoutCelebritiesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPostFeedWithoutCelebrities != nil && mm_atomic.LoadUint64(&m.afterGetPostFeedWithoutCelebritiesCounter) < 1 {
		m.t.Error("Expected call to DurableRepoMock.GetPostFeedWithoutCelebrities")
	}
}

type mDurableRepoMockGetProfileByUsername struct {
	mock               *DurableRepoMock
	defaultExpectation *DurableRepoMockGetProfileByUsernameExpectation
	expectations       []*DurableRepoMockGetProfileByUsernameExpectation

	callArgs []*DurableRepoMockGetProfileByUsernameParams
	mutex    sync.RWMutex
}

// DurableRepoMockGetProfileByUsernameExpectation specifies expectation struct of the durableRepo.GetProfileByUsername
type DurableRepoMockGetProfileByUsernameExpectation struct {
	mock    *DurableRepoMock
	params  *DurableRepoMockGetProfileByUsernameParams
	results *DurableRepoMockGetProfileByUsernameResults
	Counter uint64
}

// DurableRepoMockGetProfileByUsernameParams contains parameters of the durableRepo.GetProfileByUsername
type DurableRepoMockGetProfileByUsernameParams struct {
	ctx      context.Context
	username string
}

// DurableRepoMockGetProfileByUsernameResults contains results of the durableRepo.GetProfileByUsername
type DurableRepoMockGetProfileByUsernameResults struct {
	pp1 *entity.Profile
	err error
}

// Expect sets up expected params for durableRepo.GetProfileByUsername
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) Expect(ctx context.Context, username string) *mDurableRepoMockGetProfileByUsername {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("DurableRepoMock.GetProfileByUsername mock is already set by Set")
	}

	if mmGetProfileByUsername.defaultExpectation == nil {
		mmGetProfileByUsername.defaultExpectation = &DurableRepoMockGetProfileByUsernameExpectation{}
	}

	mmGetProfileByUsername.defaultExpectation.params = &DurableRepoMockGetProfileByUsernameParams{ctx, username}
	for _, e := range mmGetProfileByUsername.expectations {
		if minimock.Equal(e.params, mmGetProfileByUsername.defaultExpectation.params) {
			mmGetProfileByUsername.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProfileByUsername.defaultExpectation.params)
		}
	}

	return mmGetProfileByUsername
}

// Inspect accepts an inspector function that has same arguments as the durableRepo.GetProfileByUsername
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) Inspect(f func(ctx context.Context, username string)) *mDurableRepoMockGetProfileByUsername {
	if mmGetProfileByUsername.mock.inspectFuncGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("Inspect function is already set for DurableRepoMock.GetProfileByUsername")
	}

	mmGetProfileByUsername.mock.inspectFuncGetProfileByUsername = f

	return mmGetProfileByUsername
}

// Return sets up results that will be returned by durableRepo.GetProfileByUsername
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) Return(pp1 *entity.Profile, err error) *DurableRepoMock {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("DurableRepoMock.GetProfileByUsername mock is already set by Set")
	}

	if mmGetProfileByUsername.defaultExpectation == nil {
		mmGetProfileByUsername.defaultExpectation = &DurableRepoMockGetProfileByUsernameExpectation{mock: mmGetProfileByUsername.mock}
	}
	mmGetProfileByUsername.defaultExpectation.results = &DurableRepoMockGetProfileByUsernameResults{pp1, err}
	return mmGetProfileByUsername.mock
}

//Set uses given function f to mock the durableRepo.GetProfileByUsername method
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) Set(f func(ctx context.Context, username string) (pp1 *entity.Profile, err error)) *DurableRepoMock {
	if mmGetProfileByUsername.defaultExpectation != nil {
		mmGetProfileByUsername.mock.t.Fatalf("Default expectation is already set for the durableRepo.GetProfileByUsername method")
	}

	if len(mmGetProfileByUsername.expectations) > 0 {
		mmGetProfileByUsername.mock.t.Fatalf("Some expectations are already set for the durableRepo.GetProfileByUsername method")
	}

	mmGetProfileByUsername.mock.funcGetProfileByUsername = f
	return mmGetProfileByUsername.mock
}

// When sets expectation for the durableRepo.GetProfileByUsername which will trigger the result defined by the following
// Then helper
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) When(ctx context.Context, username string) *DurableRepoMockGetProfileByUsernameExpectation {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("DurableRepoMock.GetProfileByUsername mock is already set by Set")
	}

	expectation := &DurableRepoMockGetProfileByUsernameExpectation{
		mock:   mmGetProfileByUsername.mock,
		params: &DurableRepoMockGetProfileByUsernameParams{ctx, username},
	}
	mmGetProfileByUsername.expectations = append(mmGetProfileByUsername.expectations, expectation)
	return expectation
}

// Then sets up durableRepo.GetProfileByUsername return parameters for the expectation previously defined by the When method
func (e *DurableRepoMockGetProfileByUsernameExpectation) Then(pp1 *entity.Profile, err error) *DurableRepoMock {
	e.results = &DurableRepoMockGetProfileByUsernameResults{pp1, err}
	return e.mock
}

// GetProfileByUsername implements cacheupdater.durableRepo
func (mmGetProfileByUsername *DurableRepoMock) GetProfileByUsername(ctx context.Context, username string) (pp1 *entity.Profile, err error) {
	mm_atomic.AddUint64(&mmGetProfileByUsername.beforeGetProfileByUsernameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProfileByUsername.afterGetProfileByUsernameCounter, 1)

	if mmGetProfileByUsername.inspectFuncGetProfileByUsername != nil {
		mmGetProfileByUsername.inspectFuncGetProfileByUsername(ctx, username)
	}

	mm_params := &DurableRepoMockGetProfileByUsernameParams{ctx, username}

	// Record call args
	mmGetProfileByUsername.GetProfileByUsernameMock.mutex.Lock()
	mmGetProfileByUsername.GetProfileByUsernameMock.callArgs = append(mmGetProfileByUsername.GetProfileByUsernameMock.callArgs, mm_params)
	mmGetProfileByUsername.GetProfileByUsernameMock.mutex.Unlock()

	for _, e := range mmGetProfileByUsername.GetProfileByUsernameMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.params
		mm_got := DurableRepoMockGetProfileByUsernameParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProfileByUsername.t.Errorf("DurableRepoMock.GetProfileByUsername got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProfileByUsername.t.Fatal("No results are set for the DurableRepoMock.GetProfileByUsername")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProfileByUsername.funcGetProfileByUsername != nil {
		return mmGetProfileByUsername.funcGetProfileByUsername(ctx, username)
	}
	mmGetProfileByUsername.t.Fatalf("Unexpected call to DurableRepoMock.GetProfileByUsername. %v %v", ctx, username)
	return
}

// GetProfileByUsernameAfterCounter returns a count of finished DurableRepoMock.GetProfileByUsername invocations
func (mmGetProfileByUsername *DurableRepoMock) GetProfileByUsernameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfileByUsername.afterGetProfileByUsernameCounter)
}

// GetProfileByUsernameBeforeCounter returns a count of DurableRepoMock.GetProfileByUsername invocations
func (mmGetProfileByUsername *DurableRepoMock) GetProfileByUsernameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfileByUsername.beforeGetProfileByUsernameCounter)
}

// Calls returns a list of arguments used in each call to DurableRepoMock.GetProfileByUsername.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProfileByUsername *mDurableRepoMockGetProfileByUsername) Calls() []*DurableRepoMockGetProfileByUsernameParams {
	mmGetProfileByUsername.mutex.RLock()

	argCopy := make([]*DurableRepoMockGetProfileByUsernameParams, len(mmGetProfileByUsername.callArgs))
	copy(argCopy, mmGetProfileByUsername.callArgs)

	mmGetProfileByUsername.mutex.RUnlock()

	return argCopy
}

// MinimockGetProfileByUsernameDone returns true if the count of the GetProfileByUsername invocations corresponds
// the number of defined expectations
func (m *DurableRepoMock) MinimockGetProfileByUsernameDone() bool {
	for _, e := range m.GetProfileByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfileByUsername != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProfileByUsernameInspect logs each unmet expectation
func (m *DurableRepoMock) MinimockGetProfileByUsernameInspect() {
	for _, e := range m.GetProfileByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DurableRepoMock.GetProfileByUsername with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		if m.GetProfileByUsernameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DurableRepoMock.GetProfileByUsername")
		} else {
			m.t.Errorf("Expected call to DurableRepoMock.GetProfileByUsername with params: %#v", *m.GetProfileByUsernameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfileByUsername != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		m.t.Error("Expected call to DurableRepoMock.GetProfileByUsername")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DurableRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetCelebrityFriendsInspect()

		m.MinimockGetFollowersOfUserInspect()

		m.MinimockGetPostFeedWithoutCelebritiesInspect()

		m.MinimockGetProfileByUsernameInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DurableRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DurableRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCelebrityFriendsDone() &&
		m.MinimockGetFollowersOfUserDone() &&
		m.MinimockGetPostFeedWithoutCelebritiesDone() &&
		m.MinimockGetProfileByUsernameDone()
}
