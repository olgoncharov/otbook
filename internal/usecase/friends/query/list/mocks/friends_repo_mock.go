package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/query/list.friendsRepo -o ./internal/usecase/friends/query/list/mocks/friends_repo_mock.go -n FriendsRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/olgoncharov/otbook/internal/entity"
)

// FriendsRepoMock implements list.friendsRepo
type FriendsRepoMock struct {
	t minimock.Tester

	funcGetCountOfFriends          func(ctx context.Context, username string) (u1 uint, err error)
	inspectFuncGetCountOfFriends   func(ctx context.Context, username string)
	afterGetCountOfFriendsCounter  uint64
	beforeGetCountOfFriendsCounter uint64
	GetCountOfFriendsMock          mFriendsRepoMockGetCountOfFriends

	funcGetFriendsOfUser          func(ctx context.Context, username string, limit uint, offset uint) (pa1 []entity.Profile, err error)
	inspectFuncGetFriendsOfUser   func(ctx context.Context, username string, limit uint, offset uint)
	afterGetFriendsOfUserCounter  uint64
	beforeGetFriendsOfUserCounter uint64
	GetFriendsOfUserMock          mFriendsRepoMockGetFriendsOfUser
}

// NewFriendsRepoMock returns a mock for list.friendsRepo
func NewFriendsRepoMock(t minimock.Tester) *FriendsRepoMock {
	m := &FriendsRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCountOfFriendsMock = mFriendsRepoMockGetCountOfFriends{mock: m}
	m.GetCountOfFriendsMock.callArgs = []*FriendsRepoMockGetCountOfFriendsParams{}

	m.GetFriendsOfUserMock = mFriendsRepoMockGetFriendsOfUser{mock: m}
	m.GetFriendsOfUserMock.callArgs = []*FriendsRepoMockGetFriendsOfUserParams{}

	return m
}

type mFriendsRepoMockGetCountOfFriends struct {
	mock               *FriendsRepoMock
	defaultExpectation *FriendsRepoMockGetCountOfFriendsExpectation
	expectations       []*FriendsRepoMockGetCountOfFriendsExpectation

	callArgs []*FriendsRepoMockGetCountOfFriendsParams
	mutex    sync.RWMutex
}

// FriendsRepoMockGetCountOfFriendsExpectation specifies expectation struct of the friendsRepo.GetCountOfFriends
type FriendsRepoMockGetCountOfFriendsExpectation struct {
	mock    *FriendsRepoMock
	params  *FriendsRepoMockGetCountOfFriendsParams
	results *FriendsRepoMockGetCountOfFriendsResults
	Counter uint64
}

// FriendsRepoMockGetCountOfFriendsParams contains parameters of the friendsRepo.GetCountOfFriends
type FriendsRepoMockGetCountOfFriendsParams struct {
	ctx      context.Context
	username string
}

// FriendsRepoMockGetCountOfFriendsResults contains results of the friendsRepo.GetCountOfFriends
type FriendsRepoMockGetCountOfFriendsResults struct {
	u1  uint
	err error
}

// Expect sets up expected params for friendsRepo.GetCountOfFriends
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) Expect(ctx context.Context, username string) *mFriendsRepoMockGetCountOfFriends {
	if mmGetCountOfFriends.mock.funcGetCountOfFriends != nil {
		mmGetCountOfFriends.mock.t.Fatalf("FriendsRepoMock.GetCountOfFriends mock is already set by Set")
	}

	if mmGetCountOfFriends.defaultExpectation == nil {
		mmGetCountOfFriends.defaultExpectation = &FriendsRepoMockGetCountOfFriendsExpectation{}
	}

	mmGetCountOfFriends.defaultExpectation.params = &FriendsRepoMockGetCountOfFriendsParams{ctx, username}
	for _, e := range mmGetCountOfFriends.expectations {
		if minimock.Equal(e.params, mmGetCountOfFriends.defaultExpectation.params) {
			mmGetCountOfFriends.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCountOfFriends.defaultExpectation.params)
		}
	}

	return mmGetCountOfFriends
}

// Inspect accepts an inspector function that has same arguments as the friendsRepo.GetCountOfFriends
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) Inspect(f func(ctx context.Context, username string)) *mFriendsRepoMockGetCountOfFriends {
	if mmGetCountOfFriends.mock.inspectFuncGetCountOfFriends != nil {
		mmGetCountOfFriends.mock.t.Fatalf("Inspect function is already set for FriendsRepoMock.GetCountOfFriends")
	}

	mmGetCountOfFriends.mock.inspectFuncGetCountOfFriends = f

	return mmGetCountOfFriends
}

// Return sets up results that will be returned by friendsRepo.GetCountOfFriends
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) Return(u1 uint, err error) *FriendsRepoMock {
	if mmGetCountOfFriends.mock.funcGetCountOfFriends != nil {
		mmGetCountOfFriends.mock.t.Fatalf("FriendsRepoMock.GetCountOfFriends mock is already set by Set")
	}

	if mmGetCountOfFriends.defaultExpectation == nil {
		mmGetCountOfFriends.defaultExpectation = &FriendsRepoMockGetCountOfFriendsExpectation{mock: mmGetCountOfFriends.mock}
	}
	mmGetCountOfFriends.defaultExpectation.results = &FriendsRepoMockGetCountOfFriendsResults{u1, err}
	return mmGetCountOfFriends.mock
}

//Set uses given function f to mock the friendsRepo.GetCountOfFriends method
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) Set(f func(ctx context.Context, username string) (u1 uint, err error)) *FriendsRepoMock {
	if mmGetCountOfFriends.defaultExpectation != nil {
		mmGetCountOfFriends.mock.t.Fatalf("Default expectation is already set for the friendsRepo.GetCountOfFriends method")
	}

	if len(mmGetCountOfFriends.expectations) > 0 {
		mmGetCountOfFriends.mock.t.Fatalf("Some expectations are already set for the friendsRepo.GetCountOfFriends method")
	}

	mmGetCountOfFriends.mock.funcGetCountOfFriends = f
	return mmGetCountOfFriends.mock
}

// When sets expectation for the friendsRepo.GetCountOfFriends which will trigger the result defined by the following
// Then helper
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) When(ctx context.Context, username string) *FriendsRepoMockGetCountOfFriendsExpectation {
	if mmGetCountOfFriends.mock.funcGetCountOfFriends != nil {
		mmGetCountOfFriends.mock.t.Fatalf("FriendsRepoMock.GetCountOfFriends mock is already set by Set")
	}

	expectation := &FriendsRepoMockGetCountOfFriendsExpectation{
		mock:   mmGetCountOfFriends.mock,
		params: &FriendsRepoMockGetCountOfFriendsParams{ctx, username},
	}
	mmGetCountOfFriends.expectations = append(mmGetCountOfFriends.expectations, expectation)
	return expectation
}

// Then sets up friendsRepo.GetCountOfFriends return parameters for the expectation previously defined by the When method
func (e *FriendsRepoMockGetCountOfFriendsExpectation) Then(u1 uint, err error) *FriendsRepoMock {
	e.results = &FriendsRepoMockGetCountOfFriendsResults{u1, err}
	return e.mock
}

// GetCountOfFriends implements list.friendsRepo
func (mmGetCountOfFriends *FriendsRepoMock) GetCountOfFriends(ctx context.Context, username string) (u1 uint, err error) {
	mm_atomic.AddUint64(&mmGetCountOfFriends.beforeGetCountOfFriendsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCountOfFriends.afterGetCountOfFriendsCounter, 1)

	if mmGetCountOfFriends.inspectFuncGetCountOfFriends != nil {
		mmGetCountOfFriends.inspectFuncGetCountOfFriends(ctx, username)
	}

	mm_params := &FriendsRepoMockGetCountOfFriendsParams{ctx, username}

	// Record call args
	mmGetCountOfFriends.GetCountOfFriendsMock.mutex.Lock()
	mmGetCountOfFriends.GetCountOfFriendsMock.callArgs = append(mmGetCountOfFriends.GetCountOfFriendsMock.callArgs, mm_params)
	mmGetCountOfFriends.GetCountOfFriendsMock.mutex.Unlock()

	for _, e := range mmGetCountOfFriends.GetCountOfFriendsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetCountOfFriends.GetCountOfFriendsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCountOfFriends.GetCountOfFriendsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCountOfFriends.GetCountOfFriendsMock.defaultExpectation.params
		mm_got := FriendsRepoMockGetCountOfFriendsParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCountOfFriends.t.Errorf("FriendsRepoMock.GetCountOfFriends got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCountOfFriends.GetCountOfFriendsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCountOfFriends.t.Fatal("No results are set for the FriendsRepoMock.GetCountOfFriends")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetCountOfFriends.funcGetCountOfFriends != nil {
		return mmGetCountOfFriends.funcGetCountOfFriends(ctx, username)
	}
	mmGetCountOfFriends.t.Fatalf("Unexpected call to FriendsRepoMock.GetCountOfFriends. %v %v", ctx, username)
	return
}

// GetCountOfFriendsAfterCounter returns a count of finished FriendsRepoMock.GetCountOfFriends invocations
func (mmGetCountOfFriends *FriendsRepoMock) GetCountOfFriendsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCountOfFriends.afterGetCountOfFriendsCounter)
}

// GetCountOfFriendsBeforeCounter returns a count of FriendsRepoMock.GetCountOfFriends invocations
func (mmGetCountOfFriends *FriendsRepoMock) GetCountOfFriendsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCountOfFriends.beforeGetCountOfFriendsCounter)
}

// Calls returns a list of arguments used in each call to FriendsRepoMock.GetCountOfFriends.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCountOfFriends *mFriendsRepoMockGetCountOfFriends) Calls() []*FriendsRepoMockGetCountOfFriendsParams {
	mmGetCountOfFriends.mutex.RLock()

	argCopy := make([]*FriendsRepoMockGetCountOfFriendsParams, len(mmGetCountOfFriends.callArgs))
	copy(argCopy, mmGetCountOfFriends.callArgs)

	mmGetCountOfFriends.mutex.RUnlock()

	return argCopy
}

// MinimockGetCountOfFriendsDone returns true if the count of the GetCountOfFriends invocations corresponds
// the number of defined expectations
func (m *FriendsRepoMock) MinimockGetCountOfFriendsDone() bool {
	for _, e := range m.GetCountOfFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCountOfFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCountOfFriendsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCountOfFriends != nil && mm_atomic.LoadUint64(&m.afterGetCountOfFriendsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCountOfFriendsInspect logs each unmet expectation
func (m *FriendsRepoMock) MinimockGetCountOfFriendsInspect() {
	for _, e := range m.GetCountOfFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FriendsRepoMock.GetCountOfFriends with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCountOfFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCountOfFriendsCounter) < 1 {
		if m.GetCountOfFriendsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FriendsRepoMock.GetCountOfFriends")
		} else {
			m.t.Errorf("Expected call to FriendsRepoMock.GetCountOfFriends with params: %#v", *m.GetCountOfFriendsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCountOfFriends != nil && mm_atomic.LoadUint64(&m.afterGetCountOfFriendsCounter) < 1 {
		m.t.Error("Expected call to FriendsRepoMock.GetCountOfFriends")
	}
}

type mFriendsRepoMockGetFriendsOfUser struct {
	mock               *FriendsRepoMock
	defaultExpectation *FriendsRepoMockGetFriendsOfUserExpectation
	expectations       []*FriendsRepoMockGetFriendsOfUserExpectation

	callArgs []*FriendsRepoMockGetFriendsOfUserParams
	mutex    sync.RWMutex
}

// FriendsRepoMockGetFriendsOfUserExpectation specifies expectation struct of the friendsRepo.GetFriendsOfUser
type FriendsRepoMockGetFriendsOfUserExpectation struct {
	mock    *FriendsRepoMock
	params  *FriendsRepoMockGetFriendsOfUserParams
	results *FriendsRepoMockGetFriendsOfUserResults
	Counter uint64
}

// FriendsRepoMockGetFriendsOfUserParams contains parameters of the friendsRepo.GetFriendsOfUser
type FriendsRepoMockGetFriendsOfUserParams struct {
	ctx      context.Context
	username string
	limit    uint
	offset   uint
}

// FriendsRepoMockGetFriendsOfUserResults contains results of the friendsRepo.GetFriendsOfUser
type FriendsRepoMockGetFriendsOfUserResults struct {
	pa1 []entity.Profile
	err error
}

// Expect sets up expected params for friendsRepo.GetFriendsOfUser
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) Expect(ctx context.Context, username string, limit uint, offset uint) *mFriendsRepoMockGetFriendsOfUser {
	if mmGetFriendsOfUser.mock.funcGetFriendsOfUser != nil {
		mmGetFriendsOfUser.mock.t.Fatalf("FriendsRepoMock.GetFriendsOfUser mock is already set by Set")
	}

	if mmGetFriendsOfUser.defaultExpectation == nil {
		mmGetFriendsOfUser.defaultExpectation = &FriendsRepoMockGetFriendsOfUserExpectation{}
	}

	mmGetFriendsOfUser.defaultExpectation.params = &FriendsRepoMockGetFriendsOfUserParams{ctx, username, limit, offset}
	for _, e := range mmGetFriendsOfUser.expectations {
		if minimock.Equal(e.params, mmGetFriendsOfUser.defaultExpectation.params) {
			mmGetFriendsOfUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetFriendsOfUser.defaultExpectation.params)
		}
	}

	return mmGetFriendsOfUser
}

// Inspect accepts an inspector function that has same arguments as the friendsRepo.GetFriendsOfUser
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) Inspect(f func(ctx context.Context, username string, limit uint, offset uint)) *mFriendsRepoMockGetFriendsOfUser {
	if mmGetFriendsOfUser.mock.inspectFuncGetFriendsOfUser != nil {
		mmGetFriendsOfUser.mock.t.Fatalf("Inspect function is already set for FriendsRepoMock.GetFriendsOfUser")
	}

	mmGetFriendsOfUser.mock.inspectFuncGetFriendsOfUser = f

	return mmGetFriendsOfUser
}

// Return sets up results that will be returned by friendsRepo.GetFriendsOfUser
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) Return(pa1 []entity.Profile, err error) *FriendsRepoMock {
	if mmGetFriendsOfUser.mock.funcGetFriendsOfUser != nil {
		mmGetFriendsOfUser.mock.t.Fatalf("FriendsRepoMock.GetFriendsOfUser mock is already set by Set")
	}

	if mmGetFriendsOfUser.defaultExpectation == nil {
		mmGetFriendsOfUser.defaultExpectation = &FriendsRepoMockGetFriendsOfUserExpectation{mock: mmGetFriendsOfUser.mock}
	}
	mmGetFriendsOfUser.defaultExpectation.results = &FriendsRepoMockGetFriendsOfUserResults{pa1, err}
	return mmGetFriendsOfUser.mock
}

//Set uses given function f to mock the friendsRepo.GetFriendsOfUser method
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) Set(f func(ctx context.Context, username string, limit uint, offset uint) (pa1 []entity.Profile, err error)) *FriendsRepoMock {
	if mmGetFriendsOfUser.defaultExpectation != nil {
		mmGetFriendsOfUser.mock.t.Fatalf("Default expectation is already set for the friendsRepo.GetFriendsOfUser method")
	}

	if len(mmGetFriendsOfUser.expectations) > 0 {
		mmGetFriendsOfUser.mock.t.Fatalf("Some expectations are already set for the friendsRepo.GetFriendsOfUser method")
	}

	mmGetFriendsOfUser.mock.funcGetFriendsOfUser = f
	return mmGetFriendsOfUser.mock
}

// When sets expectation for the friendsRepo.GetFriendsOfUser which will trigger the result defined by the following
// Then helper
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) When(ctx context.Context, username string, limit uint, offset uint) *FriendsRepoMockGetFriendsOfUserExpectation {
	if mmGetFriendsOfUser.mock.funcGetFriendsOfUser != nil {
		mmGetFriendsOfUser.mock.t.Fatalf("FriendsRepoMock.GetFriendsOfUser mock is already set by Set")
	}

	expectation := &FriendsRepoMockGetFriendsOfUserExpectation{
		mock:   mmGetFriendsOfUser.mock,
		params: &FriendsRepoMockGetFriendsOfUserParams{ctx, username, limit, offset},
	}
	mmGetFriendsOfUser.expectations = append(mmGetFriendsOfUser.expectations, expectation)
	return expectation
}

// Then sets up friendsRepo.GetFriendsOfUser return parameters for the expectation previously defined by the When method
func (e *FriendsRepoMockGetFriendsOfUserExpectation) Then(pa1 []entity.Profile, err error) *FriendsRepoMock {
	e.results = &FriendsRepoMockGetFriendsOfUserResults{pa1, err}
	return e.mock
}

// GetFriendsOfUser implements list.friendsRepo
func (mmGetFriendsOfUser *FriendsRepoMock) GetFriendsOfUser(ctx context.Context, username string, limit uint, offset uint) (pa1 []entity.Profile, err error) {
	mm_atomic.AddUint64(&mmGetFriendsOfUser.beforeGetFriendsOfUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetFriendsOfUser.afterGetFriendsOfUserCounter, 1)

	if mmGetFriendsOfUser.inspectFuncGetFriendsOfUser != nil {
		mmGetFriendsOfUser.inspectFuncGetFriendsOfUser(ctx, username, limit, offset)
	}

	mm_params := &FriendsRepoMockGetFriendsOfUserParams{ctx, username, limit, offset}

	// Record call args
	mmGetFriendsOfUser.GetFriendsOfUserMock.mutex.Lock()
	mmGetFriendsOfUser.GetFriendsOfUserMock.callArgs = append(mmGetFriendsOfUser.GetFriendsOfUserMock.callArgs, mm_params)
	mmGetFriendsOfUser.GetFriendsOfUserMock.mutex.Unlock()

	for _, e := range mmGetFriendsOfUser.GetFriendsOfUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmGetFriendsOfUser.GetFriendsOfUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetFriendsOfUser.GetFriendsOfUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetFriendsOfUser.GetFriendsOfUserMock.defaultExpectation.params
		mm_got := FriendsRepoMockGetFriendsOfUserParams{ctx, username, limit, offset}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetFriendsOfUser.t.Errorf("FriendsRepoMock.GetFriendsOfUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetFriendsOfUser.GetFriendsOfUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetFriendsOfUser.t.Fatal("No results are set for the FriendsRepoMock.GetFriendsOfUser")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGetFriendsOfUser.funcGetFriendsOfUser != nil {
		return mmGetFriendsOfUser.funcGetFriendsOfUser(ctx, username, limit, offset)
	}
	mmGetFriendsOfUser.t.Fatalf("Unexpected call to FriendsRepoMock.GetFriendsOfUser. %v %v %v %v", ctx, username, limit, offset)
	return
}

// GetFriendsOfUserAfterCounter returns a count of finished FriendsRepoMock.GetFriendsOfUser invocations
func (mmGetFriendsOfUser *FriendsRepoMock) GetFriendsOfUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFriendsOfUser.afterGetFriendsOfUserCounter)
}

// GetFriendsOfUserBeforeCounter returns a count of FriendsRepoMock.GetFriendsOfUser invocations
func (mmGetFriendsOfUser *FriendsRepoMock) GetFriendsOfUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFriendsOfUser.beforeGetFriendsOfUserCounter)
}

// Calls returns a list of arguments used in each call to FriendsRepoMock.GetFriendsOfUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetFriendsOfUser *mFriendsRepoMockGetFriendsOfUser) Calls() []*FriendsRepoMockGetFriendsOfUserParams {
	mmGetFriendsOfUser.mutex.RLock()

	argCopy := make([]*FriendsRepoMockGetFriendsOfUserParams, len(mmGetFriendsOfUser.callArgs))
	copy(argCopy, mmGetFriendsOfUser.callArgs)

	mmGetFriendsOfUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetFriendsOfUserDone returns true if the count of the GetFriendsOfUser invocations corresponds
// the number of defined expectations
func (m *FriendsRepoMock) MinimockGetFriendsOfUserDone() bool {
	for _, e := range m.GetFriendsOfUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFriendsOfUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFriendsOfUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFriendsOfUser != nil && mm_atomic.LoadUint64(&m.afterGetFriendsOfUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetFriendsOfUserInspect logs each unmet expectation
func (m *FriendsRepoMock) MinimockGetFriendsOfUserInspect() {
	for _, e := range m.GetFriendsOfUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FriendsRepoMock.GetFriendsOfUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFriendsOfUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFriendsOfUserCounter) < 1 {
		if m.GetFriendsOfUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FriendsRepoMock.GetFriendsOfUser")
		} else {
			m.t.Errorf("Expected call to FriendsRepoMock.GetFriendsOfUser with params: %#v", *m.GetFriendsOfUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFriendsOfUser != nil && mm_atomic.LoadUint64(&m.afterGetFriendsOfUserCounter) < 1 {
		m.t.Error("Expected call to FriendsRepoMock.GetFriendsOfUser")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FriendsRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetCountOfFriendsInspect()

		m.MinimockGetFriendsOfUserInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FriendsRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FriendsRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCountOfFriendsDone() &&
		m.MinimockGetFriendsOfUserDone()
}
