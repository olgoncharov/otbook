package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/command/delete.usersRepo -o ./internal/usecase/friends/command/delete/mocks/users_repo_mock.go -n UsersRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UsersRepoMock implements delete.usersRepo
type UsersRepoMock struct {
	t minimock.Tester

	funcCheckUsersExistence          func(ctx context.Context, usernames ...string) (m1 map[string]bool, err error)
	inspectFuncCheckUsersExistence   func(ctx context.Context, usernames ...string)
	afterCheckUsersExistenceCounter  uint64
	beforeCheckUsersExistenceCounter uint64
	CheckUsersExistenceMock          mUsersRepoMockCheckUsersExistence
}

// NewUsersRepoMock returns a mock for delete.usersRepo
func NewUsersRepoMock(t minimock.Tester) *UsersRepoMock {
	m := &UsersRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckUsersExistenceMock = mUsersRepoMockCheckUsersExistence{mock: m}
	m.CheckUsersExistenceMock.callArgs = []*UsersRepoMockCheckUsersExistenceParams{}

	return m
}

type mUsersRepoMockCheckUsersExistence struct {
	mock               *UsersRepoMock
	defaultExpectation *UsersRepoMockCheckUsersExistenceExpectation
	expectations       []*UsersRepoMockCheckUsersExistenceExpectation

	callArgs []*UsersRepoMockCheckUsersExistenceParams
	mutex    sync.RWMutex
}

// UsersRepoMockCheckUsersExistenceExpectation specifies expectation struct of the usersRepo.CheckUsersExistence
type UsersRepoMockCheckUsersExistenceExpectation struct {
	mock    *UsersRepoMock
	params  *UsersRepoMockCheckUsersExistenceParams
	results *UsersRepoMockCheckUsersExistenceResults
	Counter uint64
}

// UsersRepoMockCheckUsersExistenceParams contains parameters of the usersRepo.CheckUsersExistence
type UsersRepoMockCheckUsersExistenceParams struct {
	ctx       context.Context
	usernames []string
}

// UsersRepoMockCheckUsersExistenceResults contains results of the usersRepo.CheckUsersExistence
type UsersRepoMockCheckUsersExistenceResults struct {
	m1  map[string]bool
	err error
}

// Expect sets up expected params for usersRepo.CheckUsersExistence
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) Expect(ctx context.Context, usernames ...string) *mUsersRepoMockCheckUsersExistence {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UsersRepoMock.CheckUsersExistence mock is already set by Set")
	}

	if mmCheckUsersExistence.defaultExpectation == nil {
		mmCheckUsersExistence.defaultExpectation = &UsersRepoMockCheckUsersExistenceExpectation{}
	}

	mmCheckUsersExistence.defaultExpectation.params = &UsersRepoMockCheckUsersExistenceParams{ctx, usernames}
	for _, e := range mmCheckUsersExistence.expectations {
		if minimock.Equal(e.params, mmCheckUsersExistence.defaultExpectation.params) {
			mmCheckUsersExistence.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckUsersExistence.defaultExpectation.params)
		}
	}

	return mmCheckUsersExistence
}

// Inspect accepts an inspector function that has same arguments as the usersRepo.CheckUsersExistence
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) Inspect(f func(ctx context.Context, usernames ...string)) *mUsersRepoMockCheckUsersExistence {
	if mmCheckUsersExistence.mock.inspectFuncCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("Inspect function is already set for UsersRepoMock.CheckUsersExistence")
	}

	mmCheckUsersExistence.mock.inspectFuncCheckUsersExistence = f

	return mmCheckUsersExistence
}

// Return sets up results that will be returned by usersRepo.CheckUsersExistence
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) Return(m1 map[string]bool, err error) *UsersRepoMock {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UsersRepoMock.CheckUsersExistence mock is already set by Set")
	}

	if mmCheckUsersExistence.defaultExpectation == nil {
		mmCheckUsersExistence.defaultExpectation = &UsersRepoMockCheckUsersExistenceExpectation{mock: mmCheckUsersExistence.mock}
	}
	mmCheckUsersExistence.defaultExpectation.results = &UsersRepoMockCheckUsersExistenceResults{m1, err}
	return mmCheckUsersExistence.mock
}

//Set uses given function f to mock the usersRepo.CheckUsersExistence method
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) Set(f func(ctx context.Context, usernames ...string) (m1 map[string]bool, err error)) *UsersRepoMock {
	if mmCheckUsersExistence.defaultExpectation != nil {
		mmCheckUsersExistence.mock.t.Fatalf("Default expectation is already set for the usersRepo.CheckUsersExistence method")
	}

	if len(mmCheckUsersExistence.expectations) > 0 {
		mmCheckUsersExistence.mock.t.Fatalf("Some expectations are already set for the usersRepo.CheckUsersExistence method")
	}

	mmCheckUsersExistence.mock.funcCheckUsersExistence = f
	return mmCheckUsersExistence.mock
}

// When sets expectation for the usersRepo.CheckUsersExistence which will trigger the result defined by the following
// Then helper
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) When(ctx context.Context, usernames ...string) *UsersRepoMockCheckUsersExistenceExpectation {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UsersRepoMock.CheckUsersExistence mock is already set by Set")
	}

	expectation := &UsersRepoMockCheckUsersExistenceExpectation{
		mock:   mmCheckUsersExistence.mock,
		params: &UsersRepoMockCheckUsersExistenceParams{ctx, usernames},
	}
	mmCheckUsersExistence.expectations = append(mmCheckUsersExistence.expectations, expectation)
	return expectation
}

// Then sets up usersRepo.CheckUsersExistence return parameters for the expectation previously defined by the When method
func (e *UsersRepoMockCheckUsersExistenceExpectation) Then(m1 map[string]bool, err error) *UsersRepoMock {
	e.results = &UsersRepoMockCheckUsersExistenceResults{m1, err}
	return e.mock
}

// CheckUsersExistence implements delete.usersRepo
func (mmCheckUsersExistence *UsersRepoMock) CheckUsersExistence(ctx context.Context, usernames ...string) (m1 map[string]bool, err error) {
	mm_atomic.AddUint64(&mmCheckUsersExistence.beforeCheckUsersExistenceCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckUsersExistence.afterCheckUsersExistenceCounter, 1)

	if mmCheckUsersExistence.inspectFuncCheckUsersExistence != nil {
		mmCheckUsersExistence.inspectFuncCheckUsersExistence(ctx, usernames...)
	}

	mm_params := &UsersRepoMockCheckUsersExistenceParams{ctx, usernames}

	// Record call args
	mmCheckUsersExistence.CheckUsersExistenceMock.mutex.Lock()
	mmCheckUsersExistence.CheckUsersExistenceMock.callArgs = append(mmCheckUsersExistence.CheckUsersExistenceMock.callArgs, mm_params)
	mmCheckUsersExistence.CheckUsersExistenceMock.mutex.Unlock()

	for _, e := range mmCheckUsersExistence.CheckUsersExistenceMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.err
		}
	}

	if mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.params
		mm_got := UsersRepoMockCheckUsersExistenceParams{ctx, usernames}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckUsersExistence.t.Errorf("UsersRepoMock.CheckUsersExistence got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckUsersExistence.t.Fatal("No results are set for the UsersRepoMock.CheckUsersExistence")
		}
		return (*mm_results).m1, (*mm_results).err
	}
	if mmCheckUsersExistence.funcCheckUsersExistence != nil {
		return mmCheckUsersExistence.funcCheckUsersExistence(ctx, usernames...)
	}
	mmCheckUsersExistence.t.Fatalf("Unexpected call to UsersRepoMock.CheckUsersExistence. %v %v", ctx, usernames)
	return
}

// CheckUsersExistenceAfterCounter returns a count of finished UsersRepoMock.CheckUsersExistence invocations
func (mmCheckUsersExistence *UsersRepoMock) CheckUsersExistenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUsersExistence.afterCheckUsersExistenceCounter)
}

// CheckUsersExistenceBeforeCounter returns a count of UsersRepoMock.CheckUsersExistence invocations
func (mmCheckUsersExistence *UsersRepoMock) CheckUsersExistenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUsersExistence.beforeCheckUsersExistenceCounter)
}

// Calls returns a list of arguments used in each call to UsersRepoMock.CheckUsersExistence.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckUsersExistence *mUsersRepoMockCheckUsersExistence) Calls() []*UsersRepoMockCheckUsersExistenceParams {
	mmCheckUsersExistence.mutex.RLock()

	argCopy := make([]*UsersRepoMockCheckUsersExistenceParams, len(mmCheckUsersExistence.callArgs))
	copy(argCopy, mmCheckUsersExistence.callArgs)

	mmCheckUsersExistence.mutex.RUnlock()

	return argCopy
}

// MinimockCheckUsersExistenceDone returns true if the count of the CheckUsersExistence invocations corresponds
// the number of defined expectations
func (m *UsersRepoMock) MinimockCheckUsersExistenceDone() bool {
	for _, e := range m.CheckUsersExistenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckUsersExistenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckUsersExistence != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckUsersExistenceInspect logs each unmet expectation
func (m *UsersRepoMock) MinimockCheckUsersExistenceInspect() {
	for _, e := range m.CheckUsersExistenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UsersRepoMock.CheckUsersExistence with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckUsersExistenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		if m.CheckUsersExistenceMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UsersRepoMock.CheckUsersExistence")
		} else {
			m.t.Errorf("Expected call to UsersRepoMock.CheckUsersExistence with params: %#v", *m.CheckUsersExistenceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckUsersExistence != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		m.t.Error("Expected call to UsersRepoMock.CheckUsersExistence")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UsersRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCheckUsersExistenceInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UsersRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UsersRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckUsersExistenceDone()
}
