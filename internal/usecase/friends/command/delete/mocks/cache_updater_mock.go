package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/command/delete.cacheUpdater -o ./internal/usecase/friends/command/delete/mocks/cache_updater_mock.go -n CacheUpdaterMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CacheUpdaterMock implements delete.cacheUpdater
type CacheUpdaterMock struct {
	t minimock.Tester

	funcDeleteFriend          func(ctx context.Context, user string, friend string)
	inspectFuncDeleteFriend   func(ctx context.Context, user string, friend string)
	afterDeleteFriendCounter  uint64
	beforeDeleteFriendCounter uint64
	DeleteFriendMock          mCacheUpdaterMockDeleteFriend
}

// NewCacheUpdaterMock returns a mock for delete.cacheUpdater
func NewCacheUpdaterMock(t minimock.Tester) *CacheUpdaterMock {
	m := &CacheUpdaterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteFriendMock = mCacheUpdaterMockDeleteFriend{mock: m}
	m.DeleteFriendMock.callArgs = []*CacheUpdaterMockDeleteFriendParams{}

	return m
}

type mCacheUpdaterMockDeleteFriend struct {
	mock               *CacheUpdaterMock
	defaultExpectation *CacheUpdaterMockDeleteFriendExpectation
	expectations       []*CacheUpdaterMockDeleteFriendExpectation

	callArgs []*CacheUpdaterMockDeleteFriendParams
	mutex    sync.RWMutex
}

// CacheUpdaterMockDeleteFriendExpectation specifies expectation struct of the cacheUpdater.DeleteFriend
type CacheUpdaterMockDeleteFriendExpectation struct {
	mock   *CacheUpdaterMock
	params *CacheUpdaterMockDeleteFriendParams

	Counter uint64
}

// CacheUpdaterMockDeleteFriendParams contains parameters of the cacheUpdater.DeleteFriend
type CacheUpdaterMockDeleteFriendParams struct {
	ctx    context.Context
	user   string
	friend string
}

// Expect sets up expected params for cacheUpdater.DeleteFriend
func (mmDeleteFriend *mCacheUpdaterMockDeleteFriend) Expect(ctx context.Context, user string, friend string) *mCacheUpdaterMockDeleteFriend {
	if mmDeleteFriend.mock.funcDeleteFriend != nil {
		mmDeleteFriend.mock.t.Fatalf("CacheUpdaterMock.DeleteFriend mock is already set by Set")
	}

	if mmDeleteFriend.defaultExpectation == nil {
		mmDeleteFriend.defaultExpectation = &CacheUpdaterMockDeleteFriendExpectation{}
	}

	mmDeleteFriend.defaultExpectation.params = &CacheUpdaterMockDeleteFriendParams{ctx, user, friend}
	for _, e := range mmDeleteFriend.expectations {
		if minimock.Equal(e.params, mmDeleteFriend.defaultExpectation.params) {
			mmDeleteFriend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteFriend.defaultExpectation.params)
		}
	}

	return mmDeleteFriend
}

// Inspect accepts an inspector function that has same arguments as the cacheUpdater.DeleteFriend
func (mmDeleteFriend *mCacheUpdaterMockDeleteFriend) Inspect(f func(ctx context.Context, user string, friend string)) *mCacheUpdaterMockDeleteFriend {
	if mmDeleteFriend.mock.inspectFuncDeleteFriend != nil {
		mmDeleteFriend.mock.t.Fatalf("Inspect function is already set for CacheUpdaterMock.DeleteFriend")
	}

	mmDeleteFriend.mock.inspectFuncDeleteFriend = f

	return mmDeleteFriend
}

// Return sets up results that will be returned by cacheUpdater.DeleteFriend
func (mmDeleteFriend *mCacheUpdaterMockDeleteFriend) Return() *CacheUpdaterMock {
	if mmDeleteFriend.mock.funcDeleteFriend != nil {
		mmDeleteFriend.mock.t.Fatalf("CacheUpdaterMock.DeleteFriend mock is already set by Set")
	}

	if mmDeleteFriend.defaultExpectation == nil {
		mmDeleteFriend.defaultExpectation = &CacheUpdaterMockDeleteFriendExpectation{mock: mmDeleteFriend.mock}
	}

	return mmDeleteFriend.mock
}

//Set uses given function f to mock the cacheUpdater.DeleteFriend method
func (mmDeleteFriend *mCacheUpdaterMockDeleteFriend) Set(f func(ctx context.Context, user string, friend string)) *CacheUpdaterMock {
	if mmDeleteFriend.defaultExpectation != nil {
		mmDeleteFriend.mock.t.Fatalf("Default expectation is already set for the cacheUpdater.DeleteFriend method")
	}

	if len(mmDeleteFriend.expectations) > 0 {
		mmDeleteFriend.mock.t.Fatalf("Some expectations are already set for the cacheUpdater.DeleteFriend method")
	}

	mmDeleteFriend.mock.funcDeleteFriend = f
	return mmDeleteFriend.mock
}

// DeleteFriend implements delete.cacheUpdater
func (mmDeleteFriend *CacheUpdaterMock) DeleteFriend(ctx context.Context, user string, friend string) {
	mm_atomic.AddUint64(&mmDeleteFriend.beforeDeleteFriendCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteFriend.afterDeleteFriendCounter, 1)

	if mmDeleteFriend.inspectFuncDeleteFriend != nil {
		mmDeleteFriend.inspectFuncDeleteFriend(ctx, user, friend)
	}

	mm_params := &CacheUpdaterMockDeleteFriendParams{ctx, user, friend}

	// Record call args
	mmDeleteFriend.DeleteFriendMock.mutex.Lock()
	mmDeleteFriend.DeleteFriendMock.callArgs = append(mmDeleteFriend.DeleteFriendMock.callArgs, mm_params)
	mmDeleteFriend.DeleteFriendMock.mutex.Unlock()

	for _, e := range mmDeleteFriend.DeleteFriendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDeleteFriend.DeleteFriendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteFriend.DeleteFriendMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteFriend.DeleteFriendMock.defaultExpectation.params
		mm_got := CacheUpdaterMockDeleteFriendParams{ctx, user, friend}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteFriend.t.Errorf("CacheUpdaterMock.DeleteFriend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDeleteFriend.funcDeleteFriend != nil {
		mmDeleteFriend.funcDeleteFriend(ctx, user, friend)
		return
	}
	mmDeleteFriend.t.Fatalf("Unexpected call to CacheUpdaterMock.DeleteFriend. %v %v %v", ctx, user, friend)

}

// DeleteFriendAfterCounter returns a count of finished CacheUpdaterMock.DeleteFriend invocations
func (mmDeleteFriend *CacheUpdaterMock) DeleteFriendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteFriend.afterDeleteFriendCounter)
}

// DeleteFriendBeforeCounter returns a count of CacheUpdaterMock.DeleteFriend invocations
func (mmDeleteFriend *CacheUpdaterMock) DeleteFriendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteFriend.beforeDeleteFriendCounter)
}

// Calls returns a list of arguments used in each call to CacheUpdaterMock.DeleteFriend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteFriend *mCacheUpdaterMockDeleteFriend) Calls() []*CacheUpdaterMockDeleteFriendParams {
	mmDeleteFriend.mutex.RLock()

	argCopy := make([]*CacheUpdaterMockDeleteFriendParams, len(mmDeleteFriend.callArgs))
	copy(argCopy, mmDeleteFriend.callArgs)

	mmDeleteFriend.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteFriendDone returns true if the count of the DeleteFriend invocations corresponds
// the number of defined expectations
func (m *CacheUpdaterMock) MinimockDeleteFriendDone() bool {
	for _, e := range m.DeleteFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteFriendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteFriend != nil && mm_atomic.LoadUint64(&m.afterDeleteFriendCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteFriendInspect logs each unmet expectation
func (m *CacheUpdaterMock) MinimockDeleteFriendInspect() {
	for _, e := range m.DeleteFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUpdaterMock.DeleteFriend with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteFriendCounter) < 1 {
		if m.DeleteFriendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUpdaterMock.DeleteFriend")
		} else {
			m.t.Errorf("Expected call to CacheUpdaterMock.DeleteFriend with params: %#v", *m.DeleteFriendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteFriend != nil && mm_atomic.LoadUint64(&m.afterDeleteFriendCounter) < 1 {
		m.t.Error("Expected call to CacheUpdaterMock.DeleteFriend")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheUpdaterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteFriendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheUpdaterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheUpdaterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteFriendDone()
}
