package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/command/add.friendsRepo -o ./internal/usecase/friends/command/add/mocks/friends_repo_mock.go -n FriendsRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FriendsRepoMock implements add.friendsRepo
type FriendsRepoMock struct {
	t minimock.Tester

	funcAddFriend          func(ctx context.Context, user string, newFriend string) (err error)
	inspectFuncAddFriend   func(ctx context.Context, user string, newFriend string)
	afterAddFriendCounter  uint64
	beforeAddFriendCounter uint64
	AddFriendMock          mFriendsRepoMockAddFriend
}

// NewFriendsRepoMock returns a mock for add.friendsRepo
func NewFriendsRepoMock(t minimock.Tester) *FriendsRepoMock {
	m := &FriendsRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddFriendMock = mFriendsRepoMockAddFriend{mock: m}
	m.AddFriendMock.callArgs = []*FriendsRepoMockAddFriendParams{}

	return m
}

type mFriendsRepoMockAddFriend struct {
	mock               *FriendsRepoMock
	defaultExpectation *FriendsRepoMockAddFriendExpectation
	expectations       []*FriendsRepoMockAddFriendExpectation

	callArgs []*FriendsRepoMockAddFriendParams
	mutex    sync.RWMutex
}

// FriendsRepoMockAddFriendExpectation specifies expectation struct of the friendsRepo.AddFriend
type FriendsRepoMockAddFriendExpectation struct {
	mock    *FriendsRepoMock
	params  *FriendsRepoMockAddFriendParams
	results *FriendsRepoMockAddFriendResults
	Counter uint64
}

// FriendsRepoMockAddFriendParams contains parameters of the friendsRepo.AddFriend
type FriendsRepoMockAddFriendParams struct {
	ctx       context.Context
	user      string
	newFriend string
}

// FriendsRepoMockAddFriendResults contains results of the friendsRepo.AddFriend
type FriendsRepoMockAddFriendResults struct {
	err error
}

// Expect sets up expected params for friendsRepo.AddFriend
func (mmAddFriend *mFriendsRepoMockAddFriend) Expect(ctx context.Context, user string, newFriend string) *mFriendsRepoMockAddFriend {
	if mmAddFriend.mock.funcAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("FriendsRepoMock.AddFriend mock is already set by Set")
	}

	if mmAddFriend.defaultExpectation == nil {
		mmAddFriend.defaultExpectation = &FriendsRepoMockAddFriendExpectation{}
	}

	mmAddFriend.defaultExpectation.params = &FriendsRepoMockAddFriendParams{ctx, user, newFriend}
	for _, e := range mmAddFriend.expectations {
		if minimock.Equal(e.params, mmAddFriend.defaultExpectation.params) {
			mmAddFriend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddFriend.defaultExpectation.params)
		}
	}

	return mmAddFriend
}

// Inspect accepts an inspector function that has same arguments as the friendsRepo.AddFriend
func (mmAddFriend *mFriendsRepoMockAddFriend) Inspect(f func(ctx context.Context, user string, newFriend string)) *mFriendsRepoMockAddFriend {
	if mmAddFriend.mock.inspectFuncAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("Inspect function is already set for FriendsRepoMock.AddFriend")
	}

	mmAddFriend.mock.inspectFuncAddFriend = f

	return mmAddFriend
}

// Return sets up results that will be returned by friendsRepo.AddFriend
func (mmAddFriend *mFriendsRepoMockAddFriend) Return(err error) *FriendsRepoMock {
	if mmAddFriend.mock.funcAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("FriendsRepoMock.AddFriend mock is already set by Set")
	}

	if mmAddFriend.defaultExpectation == nil {
		mmAddFriend.defaultExpectation = &FriendsRepoMockAddFriendExpectation{mock: mmAddFriend.mock}
	}
	mmAddFriend.defaultExpectation.results = &FriendsRepoMockAddFriendResults{err}
	return mmAddFriend.mock
}

//Set uses given function f to mock the friendsRepo.AddFriend method
func (mmAddFriend *mFriendsRepoMockAddFriend) Set(f func(ctx context.Context, user string, newFriend string) (err error)) *FriendsRepoMock {
	if mmAddFriend.defaultExpectation != nil {
		mmAddFriend.mock.t.Fatalf("Default expectation is already set for the friendsRepo.AddFriend method")
	}

	if len(mmAddFriend.expectations) > 0 {
		mmAddFriend.mock.t.Fatalf("Some expectations are already set for the friendsRepo.AddFriend method")
	}

	mmAddFriend.mock.funcAddFriend = f
	return mmAddFriend.mock
}

// When sets expectation for the friendsRepo.AddFriend which will trigger the result defined by the following
// Then helper
func (mmAddFriend *mFriendsRepoMockAddFriend) When(ctx context.Context, user string, newFriend string) *FriendsRepoMockAddFriendExpectation {
	if mmAddFriend.mock.funcAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("FriendsRepoMock.AddFriend mock is already set by Set")
	}

	expectation := &FriendsRepoMockAddFriendExpectation{
		mock:   mmAddFriend.mock,
		params: &FriendsRepoMockAddFriendParams{ctx, user, newFriend},
	}
	mmAddFriend.expectations = append(mmAddFriend.expectations, expectation)
	return expectation
}

// Then sets up friendsRepo.AddFriend return parameters for the expectation previously defined by the When method
func (e *FriendsRepoMockAddFriendExpectation) Then(err error) *FriendsRepoMock {
	e.results = &FriendsRepoMockAddFriendResults{err}
	return e.mock
}

// AddFriend implements add.friendsRepo
func (mmAddFriend *FriendsRepoMock) AddFriend(ctx context.Context, user string, newFriend string) (err error) {
	mm_atomic.AddUint64(&mmAddFriend.beforeAddFriendCounter, 1)
	defer mm_atomic.AddUint64(&mmAddFriend.afterAddFriendCounter, 1)

	if mmAddFriend.inspectFuncAddFriend != nil {
		mmAddFriend.inspectFuncAddFriend(ctx, user, newFriend)
	}

	mm_params := &FriendsRepoMockAddFriendParams{ctx, user, newFriend}

	// Record call args
	mmAddFriend.AddFriendMock.mutex.Lock()
	mmAddFriend.AddFriendMock.callArgs = append(mmAddFriend.AddFriendMock.callArgs, mm_params)
	mmAddFriend.AddFriendMock.mutex.Unlock()

	for _, e := range mmAddFriend.AddFriendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddFriend.AddFriendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddFriend.AddFriendMock.defaultExpectation.Counter, 1)
		mm_want := mmAddFriend.AddFriendMock.defaultExpectation.params
		mm_got := FriendsRepoMockAddFriendParams{ctx, user, newFriend}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddFriend.t.Errorf("FriendsRepoMock.AddFriend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddFriend.AddFriendMock.defaultExpectation.results
		if mm_results == nil {
			mmAddFriend.t.Fatal("No results are set for the FriendsRepoMock.AddFriend")
		}
		return (*mm_results).err
	}
	if mmAddFriend.funcAddFriend != nil {
		return mmAddFriend.funcAddFriend(ctx, user, newFriend)
	}
	mmAddFriend.t.Fatalf("Unexpected call to FriendsRepoMock.AddFriend. %v %v %v", ctx, user, newFriend)
	return
}

// AddFriendAfterCounter returns a count of finished FriendsRepoMock.AddFriend invocations
func (mmAddFriend *FriendsRepoMock) AddFriendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddFriend.afterAddFriendCounter)
}

// AddFriendBeforeCounter returns a count of FriendsRepoMock.AddFriend invocations
func (mmAddFriend *FriendsRepoMock) AddFriendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddFriend.beforeAddFriendCounter)
}

// Calls returns a list of arguments used in each call to FriendsRepoMock.AddFriend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddFriend *mFriendsRepoMockAddFriend) Calls() []*FriendsRepoMockAddFriendParams {
	mmAddFriend.mutex.RLock()

	argCopy := make([]*FriendsRepoMockAddFriendParams, len(mmAddFriend.callArgs))
	copy(argCopy, mmAddFriend.callArgs)

	mmAddFriend.mutex.RUnlock()

	return argCopy
}

// MinimockAddFriendDone returns true if the count of the AddFriend invocations corresponds
// the number of defined expectations
func (m *FriendsRepoMock) MinimockAddFriendDone() bool {
	for _, e := range m.AddFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddFriend != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddFriendInspect logs each unmet expectation
func (m *FriendsRepoMock) MinimockAddFriendInspect() {
	for _, e := range m.AddFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FriendsRepoMock.AddFriend with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		if m.AddFriendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FriendsRepoMock.AddFriend")
		} else {
			m.t.Errorf("Expected call to FriendsRepoMock.AddFriend with params: %#v", *m.AddFriendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddFriend != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		m.t.Error("Expected call to FriendsRepoMock.AddFriend")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FriendsRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddFriendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FriendsRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FriendsRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddFriendDone()
}
