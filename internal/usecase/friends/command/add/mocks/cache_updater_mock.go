package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/command/add.cacheUpdater -o ./internal/usecase/friends/command/add/mocks/cache_updater_mock.go -n CacheUpdaterMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CacheUpdaterMock implements add.cacheUpdater
type CacheUpdaterMock struct {
	t minimock.Tester

	funcAddFriend          func(ctx context.Context, user string, friend string)
	inspectFuncAddFriend   func(ctx context.Context, user string, friend string)
	afterAddFriendCounter  uint64
	beforeAddFriendCounter uint64
	AddFriendMock          mCacheUpdaterMockAddFriend
}

// NewCacheUpdaterMock returns a mock for add.cacheUpdater
func NewCacheUpdaterMock(t minimock.Tester) *CacheUpdaterMock {
	m := &CacheUpdaterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddFriendMock = mCacheUpdaterMockAddFriend{mock: m}
	m.AddFriendMock.callArgs = []*CacheUpdaterMockAddFriendParams{}

	return m
}

type mCacheUpdaterMockAddFriend struct {
	mock               *CacheUpdaterMock
	defaultExpectation *CacheUpdaterMockAddFriendExpectation
	expectations       []*CacheUpdaterMockAddFriendExpectation

	callArgs []*CacheUpdaterMockAddFriendParams
	mutex    sync.RWMutex
}

// CacheUpdaterMockAddFriendExpectation specifies expectation struct of the cacheUpdater.AddFriend
type CacheUpdaterMockAddFriendExpectation struct {
	mock   *CacheUpdaterMock
	params *CacheUpdaterMockAddFriendParams

	Counter uint64
}

// CacheUpdaterMockAddFriendParams contains parameters of the cacheUpdater.AddFriend
type CacheUpdaterMockAddFriendParams struct {
	ctx    context.Context
	user   string
	friend string
}

// Expect sets up expected params for cacheUpdater.AddFriend
func (mmAddFriend *mCacheUpdaterMockAddFriend) Expect(ctx context.Context, user string, friend string) *mCacheUpdaterMockAddFriend {
	if mmAddFriend.mock.funcAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("CacheUpdaterMock.AddFriend mock is already set by Set")
	}

	if mmAddFriend.defaultExpectation == nil {
		mmAddFriend.defaultExpectation = &CacheUpdaterMockAddFriendExpectation{}
	}

	mmAddFriend.defaultExpectation.params = &CacheUpdaterMockAddFriendParams{ctx, user, friend}
	for _, e := range mmAddFriend.expectations {
		if minimock.Equal(e.params, mmAddFriend.defaultExpectation.params) {
			mmAddFriend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddFriend.defaultExpectation.params)
		}
	}

	return mmAddFriend
}

// Inspect accepts an inspector function that has same arguments as the cacheUpdater.AddFriend
func (mmAddFriend *mCacheUpdaterMockAddFriend) Inspect(f func(ctx context.Context, user string, friend string)) *mCacheUpdaterMockAddFriend {
	if mmAddFriend.mock.inspectFuncAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("Inspect function is already set for CacheUpdaterMock.AddFriend")
	}

	mmAddFriend.mock.inspectFuncAddFriend = f

	return mmAddFriend
}

// Return sets up results that will be returned by cacheUpdater.AddFriend
func (mmAddFriend *mCacheUpdaterMockAddFriend) Return() *CacheUpdaterMock {
	if mmAddFriend.mock.funcAddFriend != nil {
		mmAddFriend.mock.t.Fatalf("CacheUpdaterMock.AddFriend mock is already set by Set")
	}

	if mmAddFriend.defaultExpectation == nil {
		mmAddFriend.defaultExpectation = &CacheUpdaterMockAddFriendExpectation{mock: mmAddFriend.mock}
	}

	return mmAddFriend.mock
}

//Set uses given function f to mock the cacheUpdater.AddFriend method
func (mmAddFriend *mCacheUpdaterMockAddFriend) Set(f func(ctx context.Context, user string, friend string)) *CacheUpdaterMock {
	if mmAddFriend.defaultExpectation != nil {
		mmAddFriend.mock.t.Fatalf("Default expectation is already set for the cacheUpdater.AddFriend method")
	}

	if len(mmAddFriend.expectations) > 0 {
		mmAddFriend.mock.t.Fatalf("Some expectations are already set for the cacheUpdater.AddFriend method")
	}

	mmAddFriend.mock.funcAddFriend = f
	return mmAddFriend.mock
}

// AddFriend implements add.cacheUpdater
func (mmAddFriend *CacheUpdaterMock) AddFriend(ctx context.Context, user string, friend string) {
	mm_atomic.AddUint64(&mmAddFriend.beforeAddFriendCounter, 1)
	defer mm_atomic.AddUint64(&mmAddFriend.afterAddFriendCounter, 1)

	if mmAddFriend.inspectFuncAddFriend != nil {
		mmAddFriend.inspectFuncAddFriend(ctx, user, friend)
	}

	mm_params := &CacheUpdaterMockAddFriendParams{ctx, user, friend}

	// Record call args
	mmAddFriend.AddFriendMock.mutex.Lock()
	mmAddFriend.AddFriendMock.callArgs = append(mmAddFriend.AddFriendMock.callArgs, mm_params)
	mmAddFriend.AddFriendMock.mutex.Unlock()

	for _, e := range mmAddFriend.AddFriendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddFriend.AddFriendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddFriend.AddFriendMock.defaultExpectation.Counter, 1)
		mm_want := mmAddFriend.AddFriendMock.defaultExpectation.params
		mm_got := CacheUpdaterMockAddFriendParams{ctx, user, friend}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddFriend.t.Errorf("CacheUpdaterMock.AddFriend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddFriend.funcAddFriend != nil {
		mmAddFriend.funcAddFriend(ctx, user, friend)
		return
	}
	mmAddFriend.t.Fatalf("Unexpected call to CacheUpdaterMock.AddFriend. %v %v %v", ctx, user, friend)

}

// AddFriendAfterCounter returns a count of finished CacheUpdaterMock.AddFriend invocations
func (mmAddFriend *CacheUpdaterMock) AddFriendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddFriend.afterAddFriendCounter)
}

// AddFriendBeforeCounter returns a count of CacheUpdaterMock.AddFriend invocations
func (mmAddFriend *CacheUpdaterMock) AddFriendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddFriend.beforeAddFriendCounter)
}

// Calls returns a list of arguments used in each call to CacheUpdaterMock.AddFriend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddFriend *mCacheUpdaterMockAddFriend) Calls() []*CacheUpdaterMockAddFriendParams {
	mmAddFriend.mutex.RLock()

	argCopy := make([]*CacheUpdaterMockAddFriendParams, len(mmAddFriend.callArgs))
	copy(argCopy, mmAddFriend.callArgs)

	mmAddFriend.mutex.RUnlock()

	return argCopy
}

// MinimockAddFriendDone returns true if the count of the AddFriend invocations corresponds
// the number of defined expectations
func (m *CacheUpdaterMock) MinimockAddFriendDone() bool {
	for _, e := range m.AddFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddFriend != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddFriendInspect logs each unmet expectation
func (m *CacheUpdaterMock) MinimockAddFriendInspect() {
	for _, e := range m.AddFriendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUpdaterMock.AddFriend with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddFriendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		if m.AddFriendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUpdaterMock.AddFriend")
		} else {
			m.t.Errorf("Expected call to CacheUpdaterMock.AddFriend with params: %#v", *m.AddFriendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddFriend != nil && mm_atomic.LoadUint64(&m.afterAddFriendCounter) < 1 {
		m.t.Error("Expected call to CacheUpdaterMock.AddFriend")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheUpdaterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddFriendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheUpdaterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheUpdaterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddFriendDone()
}
