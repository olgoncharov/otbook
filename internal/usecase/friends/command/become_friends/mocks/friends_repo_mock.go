package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/friends/command/become_friends.friendsRepo -o ./internal/usecase/friends/command/become_friends/mocks/friends_repo_mock.go -n FriendsRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FriendsRepoMock implements becomefriends.friendsRepo
type FriendsRepoMock struct {
	t minimock.Tester

	funcCreateFriends          func(ctx context.Context, firstUsername string, secondUsername string) (err error)
	inspectFuncCreateFriends   func(ctx context.Context, firstUsername string, secondUsername string)
	afterCreateFriendsCounter  uint64
	beforeCreateFriendsCounter uint64
	CreateFriendsMock          mFriendsRepoMockCreateFriends
}

// NewFriendsRepoMock returns a mock for becomefriends.friendsRepo
func NewFriendsRepoMock(t minimock.Tester) *FriendsRepoMock {
	m := &FriendsRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateFriendsMock = mFriendsRepoMockCreateFriends{mock: m}
	m.CreateFriendsMock.callArgs = []*FriendsRepoMockCreateFriendsParams{}

	return m
}

type mFriendsRepoMockCreateFriends struct {
	mock               *FriendsRepoMock
	defaultExpectation *FriendsRepoMockCreateFriendsExpectation
	expectations       []*FriendsRepoMockCreateFriendsExpectation

	callArgs []*FriendsRepoMockCreateFriendsParams
	mutex    sync.RWMutex
}

// FriendsRepoMockCreateFriendsExpectation specifies expectation struct of the friendsRepo.CreateFriends
type FriendsRepoMockCreateFriendsExpectation struct {
	mock    *FriendsRepoMock
	params  *FriendsRepoMockCreateFriendsParams
	results *FriendsRepoMockCreateFriendsResults
	Counter uint64
}

// FriendsRepoMockCreateFriendsParams contains parameters of the friendsRepo.CreateFriends
type FriendsRepoMockCreateFriendsParams struct {
	ctx            context.Context
	firstUsername  string
	secondUsername string
}

// FriendsRepoMockCreateFriendsResults contains results of the friendsRepo.CreateFriends
type FriendsRepoMockCreateFriendsResults struct {
	err error
}

// Expect sets up expected params for friendsRepo.CreateFriends
func (mmCreateFriends *mFriendsRepoMockCreateFriends) Expect(ctx context.Context, firstUsername string, secondUsername string) *mFriendsRepoMockCreateFriends {
	if mmCreateFriends.mock.funcCreateFriends != nil {
		mmCreateFriends.mock.t.Fatalf("FriendsRepoMock.CreateFriends mock is already set by Set")
	}

	if mmCreateFriends.defaultExpectation == nil {
		mmCreateFriends.defaultExpectation = &FriendsRepoMockCreateFriendsExpectation{}
	}

	mmCreateFriends.defaultExpectation.params = &FriendsRepoMockCreateFriendsParams{ctx, firstUsername, secondUsername}
	for _, e := range mmCreateFriends.expectations {
		if minimock.Equal(e.params, mmCreateFriends.defaultExpectation.params) {
			mmCreateFriends.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateFriends.defaultExpectation.params)
		}
	}

	return mmCreateFriends
}

// Inspect accepts an inspector function that has same arguments as the friendsRepo.CreateFriends
func (mmCreateFriends *mFriendsRepoMockCreateFriends) Inspect(f func(ctx context.Context, firstUsername string, secondUsername string)) *mFriendsRepoMockCreateFriends {
	if mmCreateFriends.mock.inspectFuncCreateFriends != nil {
		mmCreateFriends.mock.t.Fatalf("Inspect function is already set for FriendsRepoMock.CreateFriends")
	}

	mmCreateFriends.mock.inspectFuncCreateFriends = f

	return mmCreateFriends
}

// Return sets up results that will be returned by friendsRepo.CreateFriends
func (mmCreateFriends *mFriendsRepoMockCreateFriends) Return(err error) *FriendsRepoMock {
	if mmCreateFriends.mock.funcCreateFriends != nil {
		mmCreateFriends.mock.t.Fatalf("FriendsRepoMock.CreateFriends mock is already set by Set")
	}

	if mmCreateFriends.defaultExpectation == nil {
		mmCreateFriends.defaultExpectation = &FriendsRepoMockCreateFriendsExpectation{mock: mmCreateFriends.mock}
	}
	mmCreateFriends.defaultExpectation.results = &FriendsRepoMockCreateFriendsResults{err}
	return mmCreateFriends.mock
}

//Set uses given function f to mock the friendsRepo.CreateFriends method
func (mmCreateFriends *mFriendsRepoMockCreateFriends) Set(f func(ctx context.Context, firstUsername string, secondUsername string) (err error)) *FriendsRepoMock {
	if mmCreateFriends.defaultExpectation != nil {
		mmCreateFriends.mock.t.Fatalf("Default expectation is already set for the friendsRepo.CreateFriends method")
	}

	if len(mmCreateFriends.expectations) > 0 {
		mmCreateFriends.mock.t.Fatalf("Some expectations are already set for the friendsRepo.CreateFriends method")
	}

	mmCreateFriends.mock.funcCreateFriends = f
	return mmCreateFriends.mock
}

// When sets expectation for the friendsRepo.CreateFriends which will trigger the result defined by the following
// Then helper
func (mmCreateFriends *mFriendsRepoMockCreateFriends) When(ctx context.Context, firstUsername string, secondUsername string) *FriendsRepoMockCreateFriendsExpectation {
	if mmCreateFriends.mock.funcCreateFriends != nil {
		mmCreateFriends.mock.t.Fatalf("FriendsRepoMock.CreateFriends mock is already set by Set")
	}

	expectation := &FriendsRepoMockCreateFriendsExpectation{
		mock:   mmCreateFriends.mock,
		params: &FriendsRepoMockCreateFriendsParams{ctx, firstUsername, secondUsername},
	}
	mmCreateFriends.expectations = append(mmCreateFriends.expectations, expectation)
	return expectation
}

// Then sets up friendsRepo.CreateFriends return parameters for the expectation previously defined by the When method
func (e *FriendsRepoMockCreateFriendsExpectation) Then(err error) *FriendsRepoMock {
	e.results = &FriendsRepoMockCreateFriendsResults{err}
	return e.mock
}

// CreateFriends implements becomefriends.friendsRepo
func (mmCreateFriends *FriendsRepoMock) CreateFriends(ctx context.Context, firstUsername string, secondUsername string) (err error) {
	mm_atomic.AddUint64(&mmCreateFriends.beforeCreateFriendsCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateFriends.afterCreateFriendsCounter, 1)

	if mmCreateFriends.inspectFuncCreateFriends != nil {
		mmCreateFriends.inspectFuncCreateFriends(ctx, firstUsername, secondUsername)
	}

	mm_params := &FriendsRepoMockCreateFriendsParams{ctx, firstUsername, secondUsername}

	// Record call args
	mmCreateFriends.CreateFriendsMock.mutex.Lock()
	mmCreateFriends.CreateFriendsMock.callArgs = append(mmCreateFriends.CreateFriendsMock.callArgs, mm_params)
	mmCreateFriends.CreateFriendsMock.mutex.Unlock()

	for _, e := range mmCreateFriends.CreateFriendsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateFriends.CreateFriendsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateFriends.CreateFriendsMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateFriends.CreateFriendsMock.defaultExpectation.params
		mm_got := FriendsRepoMockCreateFriendsParams{ctx, firstUsername, secondUsername}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateFriends.t.Errorf("FriendsRepoMock.CreateFriends got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateFriends.CreateFriendsMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateFriends.t.Fatal("No results are set for the FriendsRepoMock.CreateFriends")
		}
		return (*mm_results).err
	}
	if mmCreateFriends.funcCreateFriends != nil {
		return mmCreateFriends.funcCreateFriends(ctx, firstUsername, secondUsername)
	}
	mmCreateFriends.t.Fatalf("Unexpected call to FriendsRepoMock.CreateFriends. %v %v %v", ctx, firstUsername, secondUsername)
	return
}

// CreateFriendsAfterCounter returns a count of finished FriendsRepoMock.CreateFriends invocations
func (mmCreateFriends *FriendsRepoMock) CreateFriendsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateFriends.afterCreateFriendsCounter)
}

// CreateFriendsBeforeCounter returns a count of FriendsRepoMock.CreateFriends invocations
func (mmCreateFriends *FriendsRepoMock) CreateFriendsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateFriends.beforeCreateFriendsCounter)
}

// Calls returns a list of arguments used in each call to FriendsRepoMock.CreateFriends.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateFriends *mFriendsRepoMockCreateFriends) Calls() []*FriendsRepoMockCreateFriendsParams {
	mmCreateFriends.mutex.RLock()

	argCopy := make([]*FriendsRepoMockCreateFriendsParams, len(mmCreateFriends.callArgs))
	copy(argCopy, mmCreateFriends.callArgs)

	mmCreateFriends.mutex.RUnlock()

	return argCopy
}

// MinimockCreateFriendsDone returns true if the count of the CreateFriends invocations corresponds
// the number of defined expectations
func (m *FriendsRepoMock) MinimockCreateFriendsDone() bool {
	for _, e := range m.CreateFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateFriendsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateFriends != nil && mm_atomic.LoadUint64(&m.afterCreateFriendsCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateFriendsInspect logs each unmet expectation
func (m *FriendsRepoMock) MinimockCreateFriendsInspect() {
	for _, e := range m.CreateFriendsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FriendsRepoMock.CreateFriends with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateFriendsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateFriendsCounter) < 1 {
		if m.CreateFriendsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FriendsRepoMock.CreateFriends")
		} else {
			m.t.Errorf("Expected call to FriendsRepoMock.CreateFriends with params: %#v", *m.CreateFriendsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateFriends != nil && mm_atomic.LoadUint64(&m.afterCreateFriendsCounter) < 1 {
		m.t.Error("Expected call to FriendsRepoMock.CreateFriends")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FriendsRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateFriendsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FriendsRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FriendsRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateFriendsDone()
}
