package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/profile/command/create.passwordHasher -o ./internal/usecase/profile/command/create/mocks/password_hasher_mock.go -n PasswordHasherMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PasswordHasherMock implements create.passwordHasher
type PasswordHasherMock struct {
	t minimock.Tester

	funcHash          func(password string) (s1 string, err error)
	inspectFuncHash   func(password string)
	afterHashCounter  uint64
	beforeHashCounter uint64
	HashMock          mPasswordHasherMockHash
}

// NewPasswordHasherMock returns a mock for create.passwordHasher
func NewPasswordHasherMock(t minimock.Tester) *PasswordHasherMock {
	m := &PasswordHasherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HashMock = mPasswordHasherMockHash{mock: m}
	m.HashMock.callArgs = []*PasswordHasherMockHashParams{}

	return m
}

type mPasswordHasherMockHash struct {
	mock               *PasswordHasherMock
	defaultExpectation *PasswordHasherMockHashExpectation
	expectations       []*PasswordHasherMockHashExpectation

	callArgs []*PasswordHasherMockHashParams
	mutex    sync.RWMutex
}

// PasswordHasherMockHashExpectation specifies expectation struct of the passwordHasher.Hash
type PasswordHasherMockHashExpectation struct {
	mock    *PasswordHasherMock
	params  *PasswordHasherMockHashParams
	results *PasswordHasherMockHashResults
	Counter uint64
}

// PasswordHasherMockHashParams contains parameters of the passwordHasher.Hash
type PasswordHasherMockHashParams struct {
	password string
}

// PasswordHasherMockHashResults contains results of the passwordHasher.Hash
type PasswordHasherMockHashResults struct {
	s1  string
	err error
}

// Expect sets up expected params for passwordHasher.Hash
func (mmHash *mPasswordHasherMockHash) Expect(password string) *mPasswordHasherMockHash {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("PasswordHasherMock.Hash mock is already set by Set")
	}

	if mmHash.defaultExpectation == nil {
		mmHash.defaultExpectation = &PasswordHasherMockHashExpectation{}
	}

	mmHash.defaultExpectation.params = &PasswordHasherMockHashParams{password}
	for _, e := range mmHash.expectations {
		if minimock.Equal(e.params, mmHash.defaultExpectation.params) {
			mmHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHash.defaultExpectation.params)
		}
	}

	return mmHash
}

// Inspect accepts an inspector function that has same arguments as the passwordHasher.Hash
func (mmHash *mPasswordHasherMockHash) Inspect(f func(password string)) *mPasswordHasherMockHash {
	if mmHash.mock.inspectFuncHash != nil {
		mmHash.mock.t.Fatalf("Inspect function is already set for PasswordHasherMock.Hash")
	}

	mmHash.mock.inspectFuncHash = f

	return mmHash
}

// Return sets up results that will be returned by passwordHasher.Hash
func (mmHash *mPasswordHasherMockHash) Return(s1 string, err error) *PasswordHasherMock {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("PasswordHasherMock.Hash mock is already set by Set")
	}

	if mmHash.defaultExpectation == nil {
		mmHash.defaultExpectation = &PasswordHasherMockHashExpectation{mock: mmHash.mock}
	}
	mmHash.defaultExpectation.results = &PasswordHasherMockHashResults{s1, err}
	return mmHash.mock
}

//Set uses given function f to mock the passwordHasher.Hash method
func (mmHash *mPasswordHasherMockHash) Set(f func(password string) (s1 string, err error)) *PasswordHasherMock {
	if mmHash.defaultExpectation != nil {
		mmHash.mock.t.Fatalf("Default expectation is already set for the passwordHasher.Hash method")
	}

	if len(mmHash.expectations) > 0 {
		mmHash.mock.t.Fatalf("Some expectations are already set for the passwordHasher.Hash method")
	}

	mmHash.mock.funcHash = f
	return mmHash.mock
}

// When sets expectation for the passwordHasher.Hash which will trigger the result defined by the following
// Then helper
func (mmHash *mPasswordHasherMockHash) When(password string) *PasswordHasherMockHashExpectation {
	if mmHash.mock.funcHash != nil {
		mmHash.mock.t.Fatalf("PasswordHasherMock.Hash mock is already set by Set")
	}

	expectation := &PasswordHasherMockHashExpectation{
		mock:   mmHash.mock,
		params: &PasswordHasherMockHashParams{password},
	}
	mmHash.expectations = append(mmHash.expectations, expectation)
	return expectation
}

// Then sets up passwordHasher.Hash return parameters for the expectation previously defined by the When method
func (e *PasswordHasherMockHashExpectation) Then(s1 string, err error) *PasswordHasherMock {
	e.results = &PasswordHasherMockHashResults{s1, err}
	return e.mock
}

// Hash implements create.passwordHasher
func (mmHash *PasswordHasherMock) Hash(password string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmHash.beforeHashCounter, 1)
	defer mm_atomic.AddUint64(&mmHash.afterHashCounter, 1)

	if mmHash.inspectFuncHash != nil {
		mmHash.inspectFuncHash(password)
	}

	mm_params := &PasswordHasherMockHashParams{password}

	// Record call args
	mmHash.HashMock.mutex.Lock()
	mmHash.HashMock.callArgs = append(mmHash.HashMock.callArgs, mm_params)
	mmHash.HashMock.mutex.Unlock()

	for _, e := range mmHash.HashMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmHash.HashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHash.HashMock.defaultExpectation.Counter, 1)
		mm_want := mmHash.HashMock.defaultExpectation.params
		mm_got := PasswordHasherMockHashParams{password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHash.t.Errorf("PasswordHasherMock.Hash got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHash.HashMock.defaultExpectation.results
		if mm_results == nil {
			mmHash.t.Fatal("No results are set for the PasswordHasherMock.Hash")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmHash.funcHash != nil {
		return mmHash.funcHash(password)
	}
	mmHash.t.Fatalf("Unexpected call to PasswordHasherMock.Hash. %v", password)
	return
}

// HashAfterCounter returns a count of finished PasswordHasherMock.Hash invocations
func (mmHash *PasswordHasherMock) HashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHash.afterHashCounter)
}

// HashBeforeCounter returns a count of PasswordHasherMock.Hash invocations
func (mmHash *PasswordHasherMock) HashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHash.beforeHashCounter)
}

// Calls returns a list of arguments used in each call to PasswordHasherMock.Hash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHash *mPasswordHasherMockHash) Calls() []*PasswordHasherMockHashParams {
	mmHash.mutex.RLock()

	argCopy := make([]*PasswordHasherMockHashParams, len(mmHash.callArgs))
	copy(argCopy, mmHash.callArgs)

	mmHash.mutex.RUnlock()

	return argCopy
}

// MinimockHashDone returns true if the count of the Hash invocations corresponds
// the number of defined expectations
func (m *PasswordHasherMock) MinimockHashDone() bool {
	for _, e := range m.HashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHash != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockHashInspect logs each unmet expectation
func (m *PasswordHasherMock) MinimockHashInspect() {
	for _, e := range m.HashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PasswordHasherMock.Hash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		if m.HashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PasswordHasherMock.Hash")
		} else {
			m.t.Errorf("Expected call to PasswordHasherMock.Hash with params: %#v", *m.HashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHash != nil && mm_atomic.LoadUint64(&m.afterHashCounter) < 1 {
		m.t.Error("Expected call to PasswordHasherMock.Hash")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PasswordHasherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockHashInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PasswordHasherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PasswordHasherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHashDone()
}
