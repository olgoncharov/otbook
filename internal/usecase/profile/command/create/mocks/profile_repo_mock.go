package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/profile/command/create.profileRepo -o ./internal/usecase/profile/command/create/mocks/profile_repo_mock.go -n ProfileRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	repoDTO "github.com/olgoncharov/otbook/internal/repository/dto"
)

// ProfileRepoMock implements create.profileRepo
type ProfileRepoMock struct {
	t minimock.Tester

	funcCreateProfile          func(ctx context.Context, registrationInfo repoDTO.RegistrationInfo) (err error)
	inspectFuncCreateProfile   func(ctx context.Context, registrationInfo repoDTO.RegistrationInfo)
	afterCreateProfileCounter  uint64
	beforeCreateProfileCounter uint64
	CreateProfileMock          mProfileRepoMockCreateProfile
}

// NewProfileRepoMock returns a mock for create.profileRepo
func NewProfileRepoMock(t minimock.Tester) *ProfileRepoMock {
	m := &ProfileRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateProfileMock = mProfileRepoMockCreateProfile{mock: m}
	m.CreateProfileMock.callArgs = []*ProfileRepoMockCreateProfileParams{}

	return m
}

type mProfileRepoMockCreateProfile struct {
	mock               *ProfileRepoMock
	defaultExpectation *ProfileRepoMockCreateProfileExpectation
	expectations       []*ProfileRepoMockCreateProfileExpectation

	callArgs []*ProfileRepoMockCreateProfileParams
	mutex    sync.RWMutex
}

// ProfileRepoMockCreateProfileExpectation specifies expectation struct of the profileRepo.CreateProfile
type ProfileRepoMockCreateProfileExpectation struct {
	mock    *ProfileRepoMock
	params  *ProfileRepoMockCreateProfileParams
	results *ProfileRepoMockCreateProfileResults
	Counter uint64
}

// ProfileRepoMockCreateProfileParams contains parameters of the profileRepo.CreateProfile
type ProfileRepoMockCreateProfileParams struct {
	ctx              context.Context
	registrationInfo repoDTO.RegistrationInfo
}

// ProfileRepoMockCreateProfileResults contains results of the profileRepo.CreateProfile
type ProfileRepoMockCreateProfileResults struct {
	err error
}

// Expect sets up expected params for profileRepo.CreateProfile
func (mmCreateProfile *mProfileRepoMockCreateProfile) Expect(ctx context.Context, registrationInfo repoDTO.RegistrationInfo) *mProfileRepoMockCreateProfile {
	if mmCreateProfile.mock.funcCreateProfile != nil {
		mmCreateProfile.mock.t.Fatalf("ProfileRepoMock.CreateProfile mock is already set by Set")
	}

	if mmCreateProfile.defaultExpectation == nil {
		mmCreateProfile.defaultExpectation = &ProfileRepoMockCreateProfileExpectation{}
	}

	mmCreateProfile.defaultExpectation.params = &ProfileRepoMockCreateProfileParams{ctx, registrationInfo}
	for _, e := range mmCreateProfile.expectations {
		if minimock.Equal(e.params, mmCreateProfile.defaultExpectation.params) {
			mmCreateProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateProfile.defaultExpectation.params)
		}
	}

	return mmCreateProfile
}

// Inspect accepts an inspector function that has same arguments as the profileRepo.CreateProfile
func (mmCreateProfile *mProfileRepoMockCreateProfile) Inspect(f func(ctx context.Context, registrationInfo repoDTO.RegistrationInfo)) *mProfileRepoMockCreateProfile {
	if mmCreateProfile.mock.inspectFuncCreateProfile != nil {
		mmCreateProfile.mock.t.Fatalf("Inspect function is already set for ProfileRepoMock.CreateProfile")
	}

	mmCreateProfile.mock.inspectFuncCreateProfile = f

	return mmCreateProfile
}

// Return sets up results that will be returned by profileRepo.CreateProfile
func (mmCreateProfile *mProfileRepoMockCreateProfile) Return(err error) *ProfileRepoMock {
	if mmCreateProfile.mock.funcCreateProfile != nil {
		mmCreateProfile.mock.t.Fatalf("ProfileRepoMock.CreateProfile mock is already set by Set")
	}

	if mmCreateProfile.defaultExpectation == nil {
		mmCreateProfile.defaultExpectation = &ProfileRepoMockCreateProfileExpectation{mock: mmCreateProfile.mock}
	}
	mmCreateProfile.defaultExpectation.results = &ProfileRepoMockCreateProfileResults{err}
	return mmCreateProfile.mock
}

//Set uses given function f to mock the profileRepo.CreateProfile method
func (mmCreateProfile *mProfileRepoMockCreateProfile) Set(f func(ctx context.Context, registrationInfo repoDTO.RegistrationInfo) (err error)) *ProfileRepoMock {
	if mmCreateProfile.defaultExpectation != nil {
		mmCreateProfile.mock.t.Fatalf("Default expectation is already set for the profileRepo.CreateProfile method")
	}

	if len(mmCreateProfile.expectations) > 0 {
		mmCreateProfile.mock.t.Fatalf("Some expectations are already set for the profileRepo.CreateProfile method")
	}

	mmCreateProfile.mock.funcCreateProfile = f
	return mmCreateProfile.mock
}

// When sets expectation for the profileRepo.CreateProfile which will trigger the result defined by the following
// Then helper
func (mmCreateProfile *mProfileRepoMockCreateProfile) When(ctx context.Context, registrationInfo repoDTO.RegistrationInfo) *ProfileRepoMockCreateProfileExpectation {
	if mmCreateProfile.mock.funcCreateProfile != nil {
		mmCreateProfile.mock.t.Fatalf("ProfileRepoMock.CreateProfile mock is already set by Set")
	}

	expectation := &ProfileRepoMockCreateProfileExpectation{
		mock:   mmCreateProfile.mock,
		params: &ProfileRepoMockCreateProfileParams{ctx, registrationInfo},
	}
	mmCreateProfile.expectations = append(mmCreateProfile.expectations, expectation)
	return expectation
}

// Then sets up profileRepo.CreateProfile return parameters for the expectation previously defined by the When method
func (e *ProfileRepoMockCreateProfileExpectation) Then(err error) *ProfileRepoMock {
	e.results = &ProfileRepoMockCreateProfileResults{err}
	return e.mock
}

// CreateProfile implements create.profileRepo
func (mmCreateProfile *ProfileRepoMock) CreateProfile(ctx context.Context, registrationInfo repoDTO.RegistrationInfo) (err error) {
	mm_atomic.AddUint64(&mmCreateProfile.beforeCreateProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateProfile.afterCreateProfileCounter, 1)

	if mmCreateProfile.inspectFuncCreateProfile != nil {
		mmCreateProfile.inspectFuncCreateProfile(ctx, registrationInfo)
	}

	mm_params := &ProfileRepoMockCreateProfileParams{ctx, registrationInfo}

	// Record call args
	mmCreateProfile.CreateProfileMock.mutex.Lock()
	mmCreateProfile.CreateProfileMock.callArgs = append(mmCreateProfile.CreateProfileMock.callArgs, mm_params)
	mmCreateProfile.CreateProfileMock.mutex.Unlock()

	for _, e := range mmCreateProfile.CreateProfileMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateProfile.CreateProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateProfile.CreateProfileMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateProfile.CreateProfileMock.defaultExpectation.params
		mm_got := ProfileRepoMockCreateProfileParams{ctx, registrationInfo}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateProfile.t.Errorf("ProfileRepoMock.CreateProfile got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateProfile.CreateProfileMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateProfile.t.Fatal("No results are set for the ProfileRepoMock.CreateProfile")
		}
		return (*mm_results).err
	}
	if mmCreateProfile.funcCreateProfile != nil {
		return mmCreateProfile.funcCreateProfile(ctx, registrationInfo)
	}
	mmCreateProfile.t.Fatalf("Unexpected call to ProfileRepoMock.CreateProfile. %v %v", ctx, registrationInfo)
	return
}

// CreateProfileAfterCounter returns a count of finished ProfileRepoMock.CreateProfile invocations
func (mmCreateProfile *ProfileRepoMock) CreateProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProfile.afterCreateProfileCounter)
}

// CreateProfileBeforeCounter returns a count of ProfileRepoMock.CreateProfile invocations
func (mmCreateProfile *ProfileRepoMock) CreateProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProfile.beforeCreateProfileCounter)
}

// Calls returns a list of arguments used in each call to ProfileRepoMock.CreateProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateProfile *mProfileRepoMockCreateProfile) Calls() []*ProfileRepoMockCreateProfileParams {
	mmCreateProfile.mutex.RLock()

	argCopy := make([]*ProfileRepoMockCreateProfileParams, len(mmCreateProfile.callArgs))
	copy(argCopy, mmCreateProfile.callArgs)

	mmCreateProfile.mutex.RUnlock()

	return argCopy
}

// MinimockCreateProfileDone returns true if the count of the CreateProfile invocations corresponds
// the number of defined expectations
func (m *ProfileRepoMock) MinimockCreateProfileDone() bool {
	for _, e := range m.CreateProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProfile != nil && mm_atomic.LoadUint64(&m.afterCreateProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateProfileInspect logs each unmet expectation
func (m *ProfileRepoMock) MinimockCreateProfileInspect() {
	for _, e := range m.CreateProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProfileRepoMock.CreateProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProfileCounter) < 1 {
		if m.CreateProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProfileRepoMock.CreateProfile")
		} else {
			m.t.Errorf("Expected call to ProfileRepoMock.CreateProfile with params: %#v", *m.CreateProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProfile != nil && mm_atomic.LoadUint64(&m.afterCreateProfileCounter) < 1 {
		m.t.Error("Expected call to ProfileRepoMock.CreateProfile")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProfileRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateProfileInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProfileRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProfileRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateProfileDone()
}
