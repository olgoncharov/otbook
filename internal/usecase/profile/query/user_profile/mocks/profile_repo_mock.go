package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/profile/query/user_profile.profileRepo -o ./internal/usecase/profile/query/user_profile/mocks/profile_repo_mock.go -n ProfileRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/olgoncharov/otbook/internal/entity"
)

// ProfileRepoMock implements user_profile.profileRepo
type ProfileRepoMock struct {
	t minimock.Tester

	funcGetProfileByUsername          func(ctx context.Context, username string) (pp1 *entity.Profile, err error)
	inspectFuncGetProfileByUsername   func(ctx context.Context, username string)
	afterGetProfileByUsernameCounter  uint64
	beforeGetProfileByUsernameCounter uint64
	GetProfileByUsernameMock          mProfileRepoMockGetProfileByUsername
}

// NewProfileRepoMock returns a mock for user_profile.profileRepo
func NewProfileRepoMock(t minimock.Tester) *ProfileRepoMock {
	m := &ProfileRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProfileByUsernameMock = mProfileRepoMockGetProfileByUsername{mock: m}
	m.GetProfileByUsernameMock.callArgs = []*ProfileRepoMockGetProfileByUsernameParams{}

	return m
}

type mProfileRepoMockGetProfileByUsername struct {
	mock               *ProfileRepoMock
	defaultExpectation *ProfileRepoMockGetProfileByUsernameExpectation
	expectations       []*ProfileRepoMockGetProfileByUsernameExpectation

	callArgs []*ProfileRepoMockGetProfileByUsernameParams
	mutex    sync.RWMutex
}

// ProfileRepoMockGetProfileByUsernameExpectation specifies expectation struct of the profileRepo.GetProfileByUsername
type ProfileRepoMockGetProfileByUsernameExpectation struct {
	mock    *ProfileRepoMock
	params  *ProfileRepoMockGetProfileByUsernameParams
	results *ProfileRepoMockGetProfileByUsernameResults
	Counter uint64
}

// ProfileRepoMockGetProfileByUsernameParams contains parameters of the profileRepo.GetProfileByUsername
type ProfileRepoMockGetProfileByUsernameParams struct {
	ctx      context.Context
	username string
}

// ProfileRepoMockGetProfileByUsernameResults contains results of the profileRepo.GetProfileByUsername
type ProfileRepoMockGetProfileByUsernameResults struct {
	pp1 *entity.Profile
	err error
}

// Expect sets up expected params for profileRepo.GetProfileByUsername
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) Expect(ctx context.Context, username string) *mProfileRepoMockGetProfileByUsername {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("ProfileRepoMock.GetProfileByUsername mock is already set by Set")
	}

	if mmGetProfileByUsername.defaultExpectation == nil {
		mmGetProfileByUsername.defaultExpectation = &ProfileRepoMockGetProfileByUsernameExpectation{}
	}

	mmGetProfileByUsername.defaultExpectation.params = &ProfileRepoMockGetProfileByUsernameParams{ctx, username}
	for _, e := range mmGetProfileByUsername.expectations {
		if minimock.Equal(e.params, mmGetProfileByUsername.defaultExpectation.params) {
			mmGetProfileByUsername.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProfileByUsername.defaultExpectation.params)
		}
	}

	return mmGetProfileByUsername
}

// Inspect accepts an inspector function that has same arguments as the profileRepo.GetProfileByUsername
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) Inspect(f func(ctx context.Context, username string)) *mProfileRepoMockGetProfileByUsername {
	if mmGetProfileByUsername.mock.inspectFuncGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("Inspect function is already set for ProfileRepoMock.GetProfileByUsername")
	}

	mmGetProfileByUsername.mock.inspectFuncGetProfileByUsername = f

	return mmGetProfileByUsername
}

// Return sets up results that will be returned by profileRepo.GetProfileByUsername
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) Return(pp1 *entity.Profile, err error) *ProfileRepoMock {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("ProfileRepoMock.GetProfileByUsername mock is already set by Set")
	}

	if mmGetProfileByUsername.defaultExpectation == nil {
		mmGetProfileByUsername.defaultExpectation = &ProfileRepoMockGetProfileByUsernameExpectation{mock: mmGetProfileByUsername.mock}
	}
	mmGetProfileByUsername.defaultExpectation.results = &ProfileRepoMockGetProfileByUsernameResults{pp1, err}
	return mmGetProfileByUsername.mock
}

//Set uses given function f to mock the profileRepo.GetProfileByUsername method
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) Set(f func(ctx context.Context, username string) (pp1 *entity.Profile, err error)) *ProfileRepoMock {
	if mmGetProfileByUsername.defaultExpectation != nil {
		mmGetProfileByUsername.mock.t.Fatalf("Default expectation is already set for the profileRepo.GetProfileByUsername method")
	}

	if len(mmGetProfileByUsername.expectations) > 0 {
		mmGetProfileByUsername.mock.t.Fatalf("Some expectations are already set for the profileRepo.GetProfileByUsername method")
	}

	mmGetProfileByUsername.mock.funcGetProfileByUsername = f
	return mmGetProfileByUsername.mock
}

// When sets expectation for the profileRepo.GetProfileByUsername which will trigger the result defined by the following
// Then helper
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) When(ctx context.Context, username string) *ProfileRepoMockGetProfileByUsernameExpectation {
	if mmGetProfileByUsername.mock.funcGetProfileByUsername != nil {
		mmGetProfileByUsername.mock.t.Fatalf("ProfileRepoMock.GetProfileByUsername mock is already set by Set")
	}

	expectation := &ProfileRepoMockGetProfileByUsernameExpectation{
		mock:   mmGetProfileByUsername.mock,
		params: &ProfileRepoMockGetProfileByUsernameParams{ctx, username},
	}
	mmGetProfileByUsername.expectations = append(mmGetProfileByUsername.expectations, expectation)
	return expectation
}

// Then sets up profileRepo.GetProfileByUsername return parameters for the expectation previously defined by the When method
func (e *ProfileRepoMockGetProfileByUsernameExpectation) Then(pp1 *entity.Profile, err error) *ProfileRepoMock {
	e.results = &ProfileRepoMockGetProfileByUsernameResults{pp1, err}
	return e.mock
}

// GetProfileByUsername implements user_profile.profileRepo
func (mmGetProfileByUsername *ProfileRepoMock) GetProfileByUsername(ctx context.Context, username string) (pp1 *entity.Profile, err error) {
	mm_atomic.AddUint64(&mmGetProfileByUsername.beforeGetProfileByUsernameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProfileByUsername.afterGetProfileByUsernameCounter, 1)

	if mmGetProfileByUsername.inspectFuncGetProfileByUsername != nil {
		mmGetProfileByUsername.inspectFuncGetProfileByUsername(ctx, username)
	}

	mm_params := &ProfileRepoMockGetProfileByUsernameParams{ctx, username}

	// Record call args
	mmGetProfileByUsername.GetProfileByUsernameMock.mutex.Lock()
	mmGetProfileByUsername.GetProfileByUsernameMock.callArgs = append(mmGetProfileByUsername.GetProfileByUsernameMock.callArgs, mm_params)
	mmGetProfileByUsername.GetProfileByUsernameMock.mutex.Unlock()

	for _, e := range mmGetProfileByUsername.GetProfileByUsernameMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.params
		mm_got := ProfileRepoMockGetProfileByUsernameParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProfileByUsername.t.Errorf("ProfileRepoMock.GetProfileByUsername got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProfileByUsername.GetProfileByUsernameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProfileByUsername.t.Fatal("No results are set for the ProfileRepoMock.GetProfileByUsername")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProfileByUsername.funcGetProfileByUsername != nil {
		return mmGetProfileByUsername.funcGetProfileByUsername(ctx, username)
	}
	mmGetProfileByUsername.t.Fatalf("Unexpected call to ProfileRepoMock.GetProfileByUsername. %v %v", ctx, username)
	return
}

// GetProfileByUsernameAfterCounter returns a count of finished ProfileRepoMock.GetProfileByUsername invocations
func (mmGetProfileByUsername *ProfileRepoMock) GetProfileByUsernameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfileByUsername.afterGetProfileByUsernameCounter)
}

// GetProfileByUsernameBeforeCounter returns a count of ProfileRepoMock.GetProfileByUsername invocations
func (mmGetProfileByUsername *ProfileRepoMock) GetProfileByUsernameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfileByUsername.beforeGetProfileByUsernameCounter)
}

// Calls returns a list of arguments used in each call to ProfileRepoMock.GetProfileByUsername.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProfileByUsername *mProfileRepoMockGetProfileByUsername) Calls() []*ProfileRepoMockGetProfileByUsernameParams {
	mmGetProfileByUsername.mutex.RLock()

	argCopy := make([]*ProfileRepoMockGetProfileByUsernameParams, len(mmGetProfileByUsername.callArgs))
	copy(argCopy, mmGetProfileByUsername.callArgs)

	mmGetProfileByUsername.mutex.RUnlock()

	return argCopy
}

// MinimockGetProfileByUsernameDone returns true if the count of the GetProfileByUsername invocations corresponds
// the number of defined expectations
func (m *ProfileRepoMock) MinimockGetProfileByUsernameDone() bool {
	for _, e := range m.GetProfileByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfileByUsername != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProfileByUsernameInspect logs each unmet expectation
func (m *ProfileRepoMock) MinimockGetProfileByUsernameInspect() {
	for _, e := range m.GetProfileByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProfileRepoMock.GetProfileByUsername with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfileByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		if m.GetProfileByUsernameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProfileRepoMock.GetProfileByUsername")
		} else {
			m.t.Errorf("Expected call to ProfileRepoMock.GetProfileByUsername with params: %#v", *m.GetProfileByUsernameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfileByUsername != nil && mm_atomic.LoadUint64(&m.afterGetProfileByUsernameCounter) < 1 {
		m.t.Error("Expected call to ProfileRepoMock.GetProfileByUsername")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProfileRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProfileByUsernameInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProfileRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProfileRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProfileByUsernameDone()
}
