package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/profile/query/full_list.profileRepo -o ./internal/usecase/profile/query/full_list/mocks/profile_repo_mock.go -n ProfileRepoMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/olgoncharov/otbook/internal/entity"
)

// ProfileRepoMock implements fulllist.profileRepo
type ProfileRepoMock struct {
	t minimock.Tester

	funcGetAllProfiles          func(ctx context.Context, limit uint, offset uint) (pa1 []entity.Profile, err error)
	inspectFuncGetAllProfiles   func(ctx context.Context, limit uint, offset uint)
	afterGetAllProfilesCounter  uint64
	beforeGetAllProfilesCounter uint64
	GetAllProfilesMock          mProfileRepoMockGetAllProfiles

	funcGetProfilesCount          func(ctx context.Context) (u1 uint, err error)
	inspectFuncGetProfilesCount   func(ctx context.Context)
	afterGetProfilesCountCounter  uint64
	beforeGetProfilesCountCounter uint64
	GetProfilesCountMock          mProfileRepoMockGetProfilesCount
}

// NewProfileRepoMock returns a mock for fulllist.profileRepo
func NewProfileRepoMock(t minimock.Tester) *ProfileRepoMock {
	m := &ProfileRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAllProfilesMock = mProfileRepoMockGetAllProfiles{mock: m}
	m.GetAllProfilesMock.callArgs = []*ProfileRepoMockGetAllProfilesParams{}

	m.GetProfilesCountMock = mProfileRepoMockGetProfilesCount{mock: m}
	m.GetProfilesCountMock.callArgs = []*ProfileRepoMockGetProfilesCountParams{}

	return m
}

type mProfileRepoMockGetAllProfiles struct {
	mock               *ProfileRepoMock
	defaultExpectation *ProfileRepoMockGetAllProfilesExpectation
	expectations       []*ProfileRepoMockGetAllProfilesExpectation

	callArgs []*ProfileRepoMockGetAllProfilesParams
	mutex    sync.RWMutex
}

// ProfileRepoMockGetAllProfilesExpectation specifies expectation struct of the profileRepo.GetAllProfiles
type ProfileRepoMockGetAllProfilesExpectation struct {
	mock    *ProfileRepoMock
	params  *ProfileRepoMockGetAllProfilesParams
	results *ProfileRepoMockGetAllProfilesResults
	Counter uint64
}

// ProfileRepoMockGetAllProfilesParams contains parameters of the profileRepo.GetAllProfiles
type ProfileRepoMockGetAllProfilesParams struct {
	ctx    context.Context
	limit  uint
	offset uint
}

// ProfileRepoMockGetAllProfilesResults contains results of the profileRepo.GetAllProfiles
type ProfileRepoMockGetAllProfilesResults struct {
	pa1 []entity.Profile
	err error
}

// Expect sets up expected params for profileRepo.GetAllProfiles
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) Expect(ctx context.Context, limit uint, offset uint) *mProfileRepoMockGetAllProfiles {
	if mmGetAllProfiles.mock.funcGetAllProfiles != nil {
		mmGetAllProfiles.mock.t.Fatalf("ProfileRepoMock.GetAllProfiles mock is already set by Set")
	}

	if mmGetAllProfiles.defaultExpectation == nil {
		mmGetAllProfiles.defaultExpectation = &ProfileRepoMockGetAllProfilesExpectation{}
	}

	mmGetAllProfiles.defaultExpectation.params = &ProfileRepoMockGetAllProfilesParams{ctx, limit, offset}
	for _, e := range mmGetAllProfiles.expectations {
		if minimock.Equal(e.params, mmGetAllProfiles.defaultExpectation.params) {
			mmGetAllProfiles.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAllProfiles.defaultExpectation.params)
		}
	}

	return mmGetAllProfiles
}

// Inspect accepts an inspector function that has same arguments as the profileRepo.GetAllProfiles
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) Inspect(f func(ctx context.Context, limit uint, offset uint)) *mProfileRepoMockGetAllProfiles {
	if mmGetAllProfiles.mock.inspectFuncGetAllProfiles != nil {
		mmGetAllProfiles.mock.t.Fatalf("Inspect function is already set for ProfileRepoMock.GetAllProfiles")
	}

	mmGetAllProfiles.mock.inspectFuncGetAllProfiles = f

	return mmGetAllProfiles
}

// Return sets up results that will be returned by profileRepo.GetAllProfiles
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) Return(pa1 []entity.Profile, err error) *ProfileRepoMock {
	if mmGetAllProfiles.mock.funcGetAllProfiles != nil {
		mmGetAllProfiles.mock.t.Fatalf("ProfileRepoMock.GetAllProfiles mock is already set by Set")
	}

	if mmGetAllProfiles.defaultExpectation == nil {
		mmGetAllProfiles.defaultExpectation = &ProfileRepoMockGetAllProfilesExpectation{mock: mmGetAllProfiles.mock}
	}
	mmGetAllProfiles.defaultExpectation.results = &ProfileRepoMockGetAllProfilesResults{pa1, err}
	return mmGetAllProfiles.mock
}

//Set uses given function f to mock the profileRepo.GetAllProfiles method
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) Set(f func(ctx context.Context, limit uint, offset uint) (pa1 []entity.Profile, err error)) *ProfileRepoMock {
	if mmGetAllProfiles.defaultExpectation != nil {
		mmGetAllProfiles.mock.t.Fatalf("Default expectation is already set for the profileRepo.GetAllProfiles method")
	}

	if len(mmGetAllProfiles.expectations) > 0 {
		mmGetAllProfiles.mock.t.Fatalf("Some expectations are already set for the profileRepo.GetAllProfiles method")
	}

	mmGetAllProfiles.mock.funcGetAllProfiles = f
	return mmGetAllProfiles.mock
}

// When sets expectation for the profileRepo.GetAllProfiles which will trigger the result defined by the following
// Then helper
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) When(ctx context.Context, limit uint, offset uint) *ProfileRepoMockGetAllProfilesExpectation {
	if mmGetAllProfiles.mock.funcGetAllProfiles != nil {
		mmGetAllProfiles.mock.t.Fatalf("ProfileRepoMock.GetAllProfiles mock is already set by Set")
	}

	expectation := &ProfileRepoMockGetAllProfilesExpectation{
		mock:   mmGetAllProfiles.mock,
		params: &ProfileRepoMockGetAllProfilesParams{ctx, limit, offset},
	}
	mmGetAllProfiles.expectations = append(mmGetAllProfiles.expectations, expectation)
	return expectation
}

// Then sets up profileRepo.GetAllProfiles return parameters for the expectation previously defined by the When method
func (e *ProfileRepoMockGetAllProfilesExpectation) Then(pa1 []entity.Profile, err error) *ProfileRepoMock {
	e.results = &ProfileRepoMockGetAllProfilesResults{pa1, err}
	return e.mock
}

// GetAllProfiles implements fulllist.profileRepo
func (mmGetAllProfiles *ProfileRepoMock) GetAllProfiles(ctx context.Context, limit uint, offset uint) (pa1 []entity.Profile, err error) {
	mm_atomic.AddUint64(&mmGetAllProfiles.beforeGetAllProfilesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAllProfiles.afterGetAllProfilesCounter, 1)

	if mmGetAllProfiles.inspectFuncGetAllProfiles != nil {
		mmGetAllProfiles.inspectFuncGetAllProfiles(ctx, limit, offset)
	}

	mm_params := &ProfileRepoMockGetAllProfilesParams{ctx, limit, offset}

	// Record call args
	mmGetAllProfiles.GetAllProfilesMock.mutex.Lock()
	mmGetAllProfiles.GetAllProfilesMock.callArgs = append(mmGetAllProfiles.GetAllProfilesMock.callArgs, mm_params)
	mmGetAllProfiles.GetAllProfilesMock.mutex.Unlock()

	for _, e := range mmGetAllProfiles.GetAllProfilesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmGetAllProfiles.GetAllProfilesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAllProfiles.GetAllProfilesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAllProfiles.GetAllProfilesMock.defaultExpectation.params
		mm_got := ProfileRepoMockGetAllProfilesParams{ctx, limit, offset}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAllProfiles.t.Errorf("ProfileRepoMock.GetAllProfiles got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAllProfiles.GetAllProfilesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAllProfiles.t.Fatal("No results are set for the ProfileRepoMock.GetAllProfiles")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmGetAllProfiles.funcGetAllProfiles != nil {
		return mmGetAllProfiles.funcGetAllProfiles(ctx, limit, offset)
	}
	mmGetAllProfiles.t.Fatalf("Unexpected call to ProfileRepoMock.GetAllProfiles. %v %v %v", ctx, limit, offset)
	return
}

// GetAllProfilesAfterCounter returns a count of finished ProfileRepoMock.GetAllProfiles invocations
func (mmGetAllProfiles *ProfileRepoMock) GetAllProfilesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllProfiles.afterGetAllProfilesCounter)
}

// GetAllProfilesBeforeCounter returns a count of ProfileRepoMock.GetAllProfiles invocations
func (mmGetAllProfiles *ProfileRepoMock) GetAllProfilesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllProfiles.beforeGetAllProfilesCounter)
}

// Calls returns a list of arguments used in each call to ProfileRepoMock.GetAllProfiles.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAllProfiles *mProfileRepoMockGetAllProfiles) Calls() []*ProfileRepoMockGetAllProfilesParams {
	mmGetAllProfiles.mutex.RLock()

	argCopy := make([]*ProfileRepoMockGetAllProfilesParams, len(mmGetAllProfiles.callArgs))
	copy(argCopy, mmGetAllProfiles.callArgs)

	mmGetAllProfiles.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllProfilesDone returns true if the count of the GetAllProfiles invocations corresponds
// the number of defined expectations
func (m *ProfileRepoMock) MinimockGetAllProfilesDone() bool {
	for _, e := range m.GetAllProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllProfilesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllProfiles != nil && mm_atomic.LoadUint64(&m.afterGetAllProfilesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAllProfilesInspect logs each unmet expectation
func (m *ProfileRepoMock) MinimockGetAllProfilesInspect() {
	for _, e := range m.GetAllProfilesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProfileRepoMock.GetAllProfiles with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllProfilesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllProfilesCounter) < 1 {
		if m.GetAllProfilesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProfileRepoMock.GetAllProfiles")
		} else {
			m.t.Errorf("Expected call to ProfileRepoMock.GetAllProfiles with params: %#v", *m.GetAllProfilesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllProfiles != nil && mm_atomic.LoadUint64(&m.afterGetAllProfilesCounter) < 1 {
		m.t.Error("Expected call to ProfileRepoMock.GetAllProfiles")
	}
}

type mProfileRepoMockGetProfilesCount struct {
	mock               *ProfileRepoMock
	defaultExpectation *ProfileRepoMockGetProfilesCountExpectation
	expectations       []*ProfileRepoMockGetProfilesCountExpectation

	callArgs []*ProfileRepoMockGetProfilesCountParams
	mutex    sync.RWMutex
}

// ProfileRepoMockGetProfilesCountExpectation specifies expectation struct of the profileRepo.GetProfilesCount
type ProfileRepoMockGetProfilesCountExpectation struct {
	mock    *ProfileRepoMock
	params  *ProfileRepoMockGetProfilesCountParams
	results *ProfileRepoMockGetProfilesCountResults
	Counter uint64
}

// ProfileRepoMockGetProfilesCountParams contains parameters of the profileRepo.GetProfilesCount
type ProfileRepoMockGetProfilesCountParams struct {
	ctx context.Context
}

// ProfileRepoMockGetProfilesCountResults contains results of the profileRepo.GetProfilesCount
type ProfileRepoMockGetProfilesCountResults struct {
	u1  uint
	err error
}

// Expect sets up expected params for profileRepo.GetProfilesCount
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) Expect(ctx context.Context) *mProfileRepoMockGetProfilesCount {
	if mmGetProfilesCount.mock.funcGetProfilesCount != nil {
		mmGetProfilesCount.mock.t.Fatalf("ProfileRepoMock.GetProfilesCount mock is already set by Set")
	}

	if mmGetProfilesCount.defaultExpectation == nil {
		mmGetProfilesCount.defaultExpectation = &ProfileRepoMockGetProfilesCountExpectation{}
	}

	mmGetProfilesCount.defaultExpectation.params = &ProfileRepoMockGetProfilesCountParams{ctx}
	for _, e := range mmGetProfilesCount.expectations {
		if minimock.Equal(e.params, mmGetProfilesCount.defaultExpectation.params) {
			mmGetProfilesCount.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProfilesCount.defaultExpectation.params)
		}
	}

	return mmGetProfilesCount
}

// Inspect accepts an inspector function that has same arguments as the profileRepo.GetProfilesCount
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) Inspect(f func(ctx context.Context)) *mProfileRepoMockGetProfilesCount {
	if mmGetProfilesCount.mock.inspectFuncGetProfilesCount != nil {
		mmGetProfilesCount.mock.t.Fatalf("Inspect function is already set for ProfileRepoMock.GetProfilesCount")
	}

	mmGetProfilesCount.mock.inspectFuncGetProfilesCount = f

	return mmGetProfilesCount
}

// Return sets up results that will be returned by profileRepo.GetProfilesCount
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) Return(u1 uint, err error) *ProfileRepoMock {
	if mmGetProfilesCount.mock.funcGetProfilesCount != nil {
		mmGetProfilesCount.mock.t.Fatalf("ProfileRepoMock.GetProfilesCount mock is already set by Set")
	}

	if mmGetProfilesCount.defaultExpectation == nil {
		mmGetProfilesCount.defaultExpectation = &ProfileRepoMockGetProfilesCountExpectation{mock: mmGetProfilesCount.mock}
	}
	mmGetProfilesCount.defaultExpectation.results = &ProfileRepoMockGetProfilesCountResults{u1, err}
	return mmGetProfilesCount.mock
}

//Set uses given function f to mock the profileRepo.GetProfilesCount method
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) Set(f func(ctx context.Context) (u1 uint, err error)) *ProfileRepoMock {
	if mmGetProfilesCount.defaultExpectation != nil {
		mmGetProfilesCount.mock.t.Fatalf("Default expectation is already set for the profileRepo.GetProfilesCount method")
	}

	if len(mmGetProfilesCount.expectations) > 0 {
		mmGetProfilesCount.mock.t.Fatalf("Some expectations are already set for the profileRepo.GetProfilesCount method")
	}

	mmGetProfilesCount.mock.funcGetProfilesCount = f
	return mmGetProfilesCount.mock
}

// When sets expectation for the profileRepo.GetProfilesCount which will trigger the result defined by the following
// Then helper
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) When(ctx context.Context) *ProfileRepoMockGetProfilesCountExpectation {
	if mmGetProfilesCount.mock.funcGetProfilesCount != nil {
		mmGetProfilesCount.mock.t.Fatalf("ProfileRepoMock.GetProfilesCount mock is already set by Set")
	}

	expectation := &ProfileRepoMockGetProfilesCountExpectation{
		mock:   mmGetProfilesCount.mock,
		params: &ProfileRepoMockGetProfilesCountParams{ctx},
	}
	mmGetProfilesCount.expectations = append(mmGetProfilesCount.expectations, expectation)
	return expectation
}

// Then sets up profileRepo.GetProfilesCount return parameters for the expectation previously defined by the When method
func (e *ProfileRepoMockGetProfilesCountExpectation) Then(u1 uint, err error) *ProfileRepoMock {
	e.results = &ProfileRepoMockGetProfilesCountResults{u1, err}
	return e.mock
}

// GetProfilesCount implements fulllist.profileRepo
func (mmGetProfilesCount *ProfileRepoMock) GetProfilesCount(ctx context.Context) (u1 uint, err error) {
	mm_atomic.AddUint64(&mmGetProfilesCount.beforeGetProfilesCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProfilesCount.afterGetProfilesCountCounter, 1)

	if mmGetProfilesCount.inspectFuncGetProfilesCount != nil {
		mmGetProfilesCount.inspectFuncGetProfilesCount(ctx)
	}

	mm_params := &ProfileRepoMockGetProfilesCountParams{ctx}

	// Record call args
	mmGetProfilesCount.GetProfilesCountMock.mutex.Lock()
	mmGetProfilesCount.GetProfilesCountMock.callArgs = append(mmGetProfilesCount.GetProfilesCountMock.callArgs, mm_params)
	mmGetProfilesCount.GetProfilesCountMock.mutex.Unlock()

	for _, e := range mmGetProfilesCount.GetProfilesCountMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetProfilesCount.GetProfilesCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProfilesCount.GetProfilesCountMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProfilesCount.GetProfilesCountMock.defaultExpectation.params
		mm_got := ProfileRepoMockGetProfilesCountParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProfilesCount.t.Errorf("ProfileRepoMock.GetProfilesCount got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProfilesCount.GetProfilesCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProfilesCount.t.Fatal("No results are set for the ProfileRepoMock.GetProfilesCount")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetProfilesCount.funcGetProfilesCount != nil {
		return mmGetProfilesCount.funcGetProfilesCount(ctx)
	}
	mmGetProfilesCount.t.Fatalf("Unexpected call to ProfileRepoMock.GetProfilesCount. %v", ctx)
	return
}

// GetProfilesCountAfterCounter returns a count of finished ProfileRepoMock.GetProfilesCount invocations
func (mmGetProfilesCount *ProfileRepoMock) GetProfilesCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfilesCount.afterGetProfilesCountCounter)
}

// GetProfilesCountBeforeCounter returns a count of ProfileRepoMock.GetProfilesCount invocations
func (mmGetProfilesCount *ProfileRepoMock) GetProfilesCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProfilesCount.beforeGetProfilesCountCounter)
}

// Calls returns a list of arguments used in each call to ProfileRepoMock.GetProfilesCount.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProfilesCount *mProfileRepoMockGetProfilesCount) Calls() []*ProfileRepoMockGetProfilesCountParams {
	mmGetProfilesCount.mutex.RLock()

	argCopy := make([]*ProfileRepoMockGetProfilesCountParams, len(mmGetProfilesCount.callArgs))
	copy(argCopy, mmGetProfilesCount.callArgs)

	mmGetProfilesCount.mutex.RUnlock()

	return argCopy
}

// MinimockGetProfilesCountDone returns true if the count of the GetProfilesCount invocations corresponds
// the number of defined expectations
func (m *ProfileRepoMock) MinimockGetProfilesCountDone() bool {
	for _, e := range m.GetProfilesCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfilesCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfilesCount != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProfilesCountInspect logs each unmet expectation
func (m *ProfileRepoMock) MinimockGetProfilesCountInspect() {
	for _, e := range m.GetProfilesCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProfileRepoMock.GetProfilesCount with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProfilesCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCountCounter) < 1 {
		if m.GetProfilesCountMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProfileRepoMock.GetProfilesCount")
		} else {
			m.t.Errorf("Expected call to ProfileRepoMock.GetProfilesCount with params: %#v", *m.GetProfilesCountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProfilesCount != nil && mm_atomic.LoadUint64(&m.afterGetProfilesCountCounter) < 1 {
		m.t.Error("Expected call to ProfileRepoMock.GetProfilesCount")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProfileRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetAllProfilesInspect()

		m.MinimockGetProfilesCountInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProfileRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProfileRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAllProfilesDone() &&
		m.MinimockGetProfilesCountDone()
}
