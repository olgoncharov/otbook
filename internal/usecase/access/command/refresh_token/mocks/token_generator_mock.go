package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olgoncharov/otbook/internal/usecase/access/command/refresh_token.tokenGenerator -o ./internal/usecase/access/command/refresh_token/mocks/token_generator_mock.go -n TokenGeneratorMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TokenGeneratorMock implements refreshtoken.tokenGenerator
type TokenGeneratorMock struct {
	t minimock.Tester

	funcGenerateAccessToken          func(username string) (s1 string, err error)
	inspectFuncGenerateAccessToken   func(username string)
	afterGenerateAccessTokenCounter  uint64
	beforeGenerateAccessTokenCounter uint64
	GenerateAccessTokenMock          mTokenGeneratorMockGenerateAccessToken

	funcGenerateRefreshToken          func() (s1 string)
	inspectFuncGenerateRefreshToken   func()
	afterGenerateRefreshTokenCounter  uint64
	beforeGenerateRefreshTokenCounter uint64
	GenerateRefreshTokenMock          mTokenGeneratorMockGenerateRefreshToken
}

// NewTokenGeneratorMock returns a mock for refreshtoken.tokenGenerator
func NewTokenGeneratorMock(t minimock.Tester) *TokenGeneratorMock {
	m := &TokenGeneratorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateAccessTokenMock = mTokenGeneratorMockGenerateAccessToken{mock: m}
	m.GenerateAccessTokenMock.callArgs = []*TokenGeneratorMockGenerateAccessTokenParams{}

	m.GenerateRefreshTokenMock = mTokenGeneratorMockGenerateRefreshToken{mock: m}

	return m
}

type mTokenGeneratorMockGenerateAccessToken struct {
	mock               *TokenGeneratorMock
	defaultExpectation *TokenGeneratorMockGenerateAccessTokenExpectation
	expectations       []*TokenGeneratorMockGenerateAccessTokenExpectation

	callArgs []*TokenGeneratorMockGenerateAccessTokenParams
	mutex    sync.RWMutex
}

// TokenGeneratorMockGenerateAccessTokenExpectation specifies expectation struct of the tokenGenerator.GenerateAccessToken
type TokenGeneratorMockGenerateAccessTokenExpectation struct {
	mock    *TokenGeneratorMock
	params  *TokenGeneratorMockGenerateAccessTokenParams
	results *TokenGeneratorMockGenerateAccessTokenResults
	Counter uint64
}

// TokenGeneratorMockGenerateAccessTokenParams contains parameters of the tokenGenerator.GenerateAccessToken
type TokenGeneratorMockGenerateAccessTokenParams struct {
	username string
}

// TokenGeneratorMockGenerateAccessTokenResults contains results of the tokenGenerator.GenerateAccessToken
type TokenGeneratorMockGenerateAccessTokenResults struct {
	s1  string
	err error
}

// Expect sets up expected params for tokenGenerator.GenerateAccessToken
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) Expect(username string) *mTokenGeneratorMockGenerateAccessToken {
	if mmGenerateAccessToken.mock.funcGenerateAccessToken != nil {
		mmGenerateAccessToken.mock.t.Fatalf("TokenGeneratorMock.GenerateAccessToken mock is already set by Set")
	}

	if mmGenerateAccessToken.defaultExpectation == nil {
		mmGenerateAccessToken.defaultExpectation = &TokenGeneratorMockGenerateAccessTokenExpectation{}
	}

	mmGenerateAccessToken.defaultExpectation.params = &TokenGeneratorMockGenerateAccessTokenParams{username}
	for _, e := range mmGenerateAccessToken.expectations {
		if minimock.Equal(e.params, mmGenerateAccessToken.defaultExpectation.params) {
			mmGenerateAccessToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateAccessToken.defaultExpectation.params)
		}
	}

	return mmGenerateAccessToken
}

// Inspect accepts an inspector function that has same arguments as the tokenGenerator.GenerateAccessToken
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) Inspect(f func(username string)) *mTokenGeneratorMockGenerateAccessToken {
	if mmGenerateAccessToken.mock.inspectFuncGenerateAccessToken != nil {
		mmGenerateAccessToken.mock.t.Fatalf("Inspect function is already set for TokenGeneratorMock.GenerateAccessToken")
	}

	mmGenerateAccessToken.mock.inspectFuncGenerateAccessToken = f

	return mmGenerateAccessToken
}

// Return sets up results that will be returned by tokenGenerator.GenerateAccessToken
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) Return(s1 string, err error) *TokenGeneratorMock {
	if mmGenerateAccessToken.mock.funcGenerateAccessToken != nil {
		mmGenerateAccessToken.mock.t.Fatalf("TokenGeneratorMock.GenerateAccessToken mock is already set by Set")
	}

	if mmGenerateAccessToken.defaultExpectation == nil {
		mmGenerateAccessToken.defaultExpectation = &TokenGeneratorMockGenerateAccessTokenExpectation{mock: mmGenerateAccessToken.mock}
	}
	mmGenerateAccessToken.defaultExpectation.results = &TokenGeneratorMockGenerateAccessTokenResults{s1, err}
	return mmGenerateAccessToken.mock
}

//Set uses given function f to mock the tokenGenerator.GenerateAccessToken method
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) Set(f func(username string) (s1 string, err error)) *TokenGeneratorMock {
	if mmGenerateAccessToken.defaultExpectation != nil {
		mmGenerateAccessToken.mock.t.Fatalf("Default expectation is already set for the tokenGenerator.GenerateAccessToken method")
	}

	if len(mmGenerateAccessToken.expectations) > 0 {
		mmGenerateAccessToken.mock.t.Fatalf("Some expectations are already set for the tokenGenerator.GenerateAccessToken method")
	}

	mmGenerateAccessToken.mock.funcGenerateAccessToken = f
	return mmGenerateAccessToken.mock
}

// When sets expectation for the tokenGenerator.GenerateAccessToken which will trigger the result defined by the following
// Then helper
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) When(username string) *TokenGeneratorMockGenerateAccessTokenExpectation {
	if mmGenerateAccessToken.mock.funcGenerateAccessToken != nil {
		mmGenerateAccessToken.mock.t.Fatalf("TokenGeneratorMock.GenerateAccessToken mock is already set by Set")
	}

	expectation := &TokenGeneratorMockGenerateAccessTokenExpectation{
		mock:   mmGenerateAccessToken.mock,
		params: &TokenGeneratorMockGenerateAccessTokenParams{username},
	}
	mmGenerateAccessToken.expectations = append(mmGenerateAccessToken.expectations, expectation)
	return expectation
}

// Then sets up tokenGenerator.GenerateAccessToken return parameters for the expectation previously defined by the When method
func (e *TokenGeneratorMockGenerateAccessTokenExpectation) Then(s1 string, err error) *TokenGeneratorMock {
	e.results = &TokenGeneratorMockGenerateAccessTokenResults{s1, err}
	return e.mock
}

// GenerateAccessToken implements refreshtoken.tokenGenerator
func (mmGenerateAccessToken *TokenGeneratorMock) GenerateAccessToken(username string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerateAccessToken.beforeGenerateAccessTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateAccessToken.afterGenerateAccessTokenCounter, 1)

	if mmGenerateAccessToken.inspectFuncGenerateAccessToken != nil {
		mmGenerateAccessToken.inspectFuncGenerateAccessToken(username)
	}

	mm_params := &TokenGeneratorMockGenerateAccessTokenParams{username}

	// Record call args
	mmGenerateAccessToken.GenerateAccessTokenMock.mutex.Lock()
	mmGenerateAccessToken.GenerateAccessTokenMock.callArgs = append(mmGenerateAccessToken.GenerateAccessTokenMock.callArgs, mm_params)
	mmGenerateAccessToken.GenerateAccessTokenMock.mutex.Unlock()

	for _, e := range mmGenerateAccessToken.GenerateAccessTokenMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerateAccessToken.GenerateAccessTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateAccessToken.GenerateAccessTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateAccessToken.GenerateAccessTokenMock.defaultExpectation.params
		mm_got := TokenGeneratorMockGenerateAccessTokenParams{username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateAccessToken.t.Errorf("TokenGeneratorMock.GenerateAccessToken got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateAccessToken.GenerateAccessTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateAccessToken.t.Fatal("No results are set for the TokenGeneratorMock.GenerateAccessToken")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerateAccessToken.funcGenerateAccessToken != nil {
		return mmGenerateAccessToken.funcGenerateAccessToken(username)
	}
	mmGenerateAccessToken.t.Fatalf("Unexpected call to TokenGeneratorMock.GenerateAccessToken. %v", username)
	return
}

// GenerateAccessTokenAfterCounter returns a count of finished TokenGeneratorMock.GenerateAccessToken invocations
func (mmGenerateAccessToken *TokenGeneratorMock) GenerateAccessTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateAccessToken.afterGenerateAccessTokenCounter)
}

// GenerateAccessTokenBeforeCounter returns a count of TokenGeneratorMock.GenerateAccessToken invocations
func (mmGenerateAccessToken *TokenGeneratorMock) GenerateAccessTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateAccessToken.beforeGenerateAccessTokenCounter)
}

// Calls returns a list of arguments used in each call to TokenGeneratorMock.GenerateAccessToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateAccessToken *mTokenGeneratorMockGenerateAccessToken) Calls() []*TokenGeneratorMockGenerateAccessTokenParams {
	mmGenerateAccessToken.mutex.RLock()

	argCopy := make([]*TokenGeneratorMockGenerateAccessTokenParams, len(mmGenerateAccessToken.callArgs))
	copy(argCopy, mmGenerateAccessToken.callArgs)

	mmGenerateAccessToken.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateAccessTokenDone returns true if the count of the GenerateAccessToken invocations corresponds
// the number of defined expectations
func (m *TokenGeneratorMock) MinimockGenerateAccessTokenDone() bool {
	for _, e := range m.GenerateAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateAccessTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGenerateAccessTokenCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateAccessToken != nil && mm_atomic.LoadUint64(&m.afterGenerateAccessTokenCounter) < 1 {
		return false
	}
	return true
}

// MinimockGenerateAccessTokenInspect logs each unmet expectation
func (m *TokenGeneratorMock) MinimockGenerateAccessTokenInspect() {
	for _, e := range m.GenerateAccessTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenGeneratorMock.GenerateAccessToken with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateAccessTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGenerateAccessTokenCounter) < 1 {
		if m.GenerateAccessTokenMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenGeneratorMock.GenerateAccessToken")
		} else {
			m.t.Errorf("Expected call to TokenGeneratorMock.GenerateAccessToken with params: %#v", *m.GenerateAccessTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateAccessToken != nil && mm_atomic.LoadUint64(&m.afterGenerateAccessTokenCounter) < 1 {
		m.t.Error("Expected call to TokenGeneratorMock.GenerateAccessToken")
	}
}

type mTokenGeneratorMockGenerateRefreshToken struct {
	mock               *TokenGeneratorMock
	defaultExpectation *TokenGeneratorMockGenerateRefreshTokenExpectation
	expectations       []*TokenGeneratorMockGenerateRefreshTokenExpectation
}

// TokenGeneratorMockGenerateRefreshTokenExpectation specifies expectation struct of the tokenGenerator.GenerateRefreshToken
type TokenGeneratorMockGenerateRefreshTokenExpectation struct {
	mock *TokenGeneratorMock

	results *TokenGeneratorMockGenerateRefreshTokenResults
	Counter uint64
}

// TokenGeneratorMockGenerateRefreshTokenResults contains results of the tokenGenerator.GenerateRefreshToken
type TokenGeneratorMockGenerateRefreshTokenResults struct {
	s1 string
}

// Expect sets up expected params for tokenGenerator.GenerateRefreshToken
func (mmGenerateRefreshToken *mTokenGeneratorMockGenerateRefreshToken) Expect() *mTokenGeneratorMockGenerateRefreshToken {
	if mmGenerateRefreshToken.mock.funcGenerateRefreshToken != nil {
		mmGenerateRefreshToken.mock.t.Fatalf("TokenGeneratorMock.GenerateRefreshToken mock is already set by Set")
	}

	if mmGenerateRefreshToken.defaultExpectation == nil {
		mmGenerateRefreshToken.defaultExpectation = &TokenGeneratorMockGenerateRefreshTokenExpectation{}
	}

	return mmGenerateRefreshToken
}

// Inspect accepts an inspector function that has same arguments as the tokenGenerator.GenerateRefreshToken
func (mmGenerateRefreshToken *mTokenGeneratorMockGenerateRefreshToken) Inspect(f func()) *mTokenGeneratorMockGenerateRefreshToken {
	if mmGenerateRefreshToken.mock.inspectFuncGenerateRefreshToken != nil {
		mmGenerateRefreshToken.mock.t.Fatalf("Inspect function is already set for TokenGeneratorMock.GenerateRefreshToken")
	}

	mmGenerateRefreshToken.mock.inspectFuncGenerateRefreshToken = f

	return mmGenerateRefreshToken
}

// Return sets up results that will be returned by tokenGenerator.GenerateRefreshToken
func (mmGenerateRefreshToken *mTokenGeneratorMockGenerateRefreshToken) Return(s1 string) *TokenGeneratorMock {
	if mmGenerateRefreshToken.mock.funcGenerateRefreshToken != nil {
		mmGenerateRefreshToken.mock.t.Fatalf("TokenGeneratorMock.GenerateRefreshToken mock is already set by Set")
	}

	if mmGenerateRefreshToken.defaultExpectation == nil {
		mmGenerateRefreshToken.defaultExpectation = &TokenGeneratorMockGenerateRefreshTokenExpectation{mock: mmGenerateRefreshToken.mock}
	}
	mmGenerateRefreshToken.defaultExpectation.results = &TokenGeneratorMockGenerateRefreshTokenResults{s1}
	return mmGenerateRefreshToken.mock
}

//Set uses given function f to mock the tokenGenerator.GenerateRefreshToken method
func (mmGenerateRefreshToken *mTokenGeneratorMockGenerateRefreshToken) Set(f func() (s1 string)) *TokenGeneratorMock {
	if mmGenerateRefreshToken.defaultExpectation != nil {
		mmGenerateRefreshToken.mock.t.Fatalf("Default expectation is already set for the tokenGenerator.GenerateRefreshToken method")
	}

	if len(mmGenerateRefreshToken.expectations) > 0 {
		mmGenerateRefreshToken.mock.t.Fatalf("Some expectations are already set for the tokenGenerator.GenerateRefreshToken method")
	}

	mmGenerateRefreshToken.mock.funcGenerateRefreshToken = f
	return mmGenerateRefreshToken.mock
}

// GenerateRefreshToken implements refreshtoken.tokenGenerator
func (mmGenerateRefreshToken *TokenGeneratorMock) GenerateRefreshToken() (s1 string) {
	mm_atomic.AddUint64(&mmGenerateRefreshToken.beforeGenerateRefreshTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateRefreshToken.afterGenerateRefreshTokenCounter, 1)

	if mmGenerateRefreshToken.inspectFuncGenerateRefreshToken != nil {
		mmGenerateRefreshToken.inspectFuncGenerateRefreshToken()
	}

	if mmGenerateRefreshToken.GenerateRefreshTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateRefreshToken.GenerateRefreshTokenMock.defaultExpectation.Counter, 1)

		mm_results := mmGenerateRefreshToken.GenerateRefreshTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateRefreshToken.t.Fatal("No results are set for the TokenGeneratorMock.GenerateRefreshToken")
		}
		return (*mm_results).s1
	}
	if mmGenerateRefreshToken.funcGenerateRefreshToken != nil {
		return mmGenerateRefreshToken.funcGenerateRefreshToken()
	}
	mmGenerateRefreshToken.t.Fatalf("Unexpected call to TokenGeneratorMock.GenerateRefreshToken.")
	return
}

// GenerateRefreshTokenAfterCounter returns a count of finished TokenGeneratorMock.GenerateRefreshToken invocations
func (mmGenerateRefreshToken *TokenGeneratorMock) GenerateRefreshTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateRefreshToken.afterGenerateRefreshTokenCounter)
}

// GenerateRefreshTokenBeforeCounter returns a count of TokenGeneratorMock.GenerateRefreshToken invocations
func (mmGenerateRefreshToken *TokenGeneratorMock) GenerateRefreshTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateRefreshToken.beforeGenerateRefreshTokenCounter)
}

// MinimockGenerateRefreshTokenDone returns true if the count of the GenerateRefreshToken invocations corresponds
// the number of defined expectations
func (m *TokenGeneratorMock) MinimockGenerateRefreshTokenDone() bool {
	for _, e := range m.GenerateRefreshTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateRefreshTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGenerateRefreshTokenCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateRefreshToken != nil && mm_atomic.LoadUint64(&m.afterGenerateRefreshTokenCounter) < 1 {
		return false
	}
	return true
}

// MinimockGenerateRefreshTokenInspect logs each unmet expectation
func (m *TokenGeneratorMock) MinimockGenerateRefreshTokenInspect() {
	for _, e := range m.GenerateRefreshTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TokenGeneratorMock.GenerateRefreshToken")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateRefreshTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGenerateRefreshTokenCounter) < 1 {
		m.t.Error("Expected call to TokenGeneratorMock.GenerateRefreshToken")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateRefreshToken != nil && mm_atomic.LoadUint64(&m.afterGenerateRefreshTokenCounter) < 1 {
		m.t.Error("Expected call to TokenGeneratorMock.GenerateRefreshToken")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenGeneratorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGenerateAccessTokenInspect()

		m.MinimockGenerateRefreshTokenInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenGeneratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenGeneratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateAccessTokenDone() &&
		m.MinimockGenerateRefreshTokenDone()
}
